Relatório de arquivos do diretório: C:/Users/Flavio/Desktop/Projeto/desafio-votacao-fullstack/fullstack-front/front/src
Data de geração: 1745630203.8551297
Extensões permitidas: .html, .scss, .ts, .json


==================================================
Arquivo: index.html
==================================================

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Front</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>



==================================================
Arquivo: main.ts
==================================================

import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { provideNgxMask } from 'ngx-mask';
import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    provideNgxMask()
  ]
}).catch(err => console.error(err));



==================================================
Arquivo: styles.scss
==================================================

@use 'sass:color';

// Variáveis do Bootstrap
$primary: #007acc; // --primary-blue
$body-bg: #1e1e1e; // --background-dark
$body-color: #d4d4d4; // --text-light
$input-bg: #252526; // --input-bg
$border-color: #3c3c3c; // --border-color
$header-color: #333333; // --header-color
$sidebar-color: #272727; // --sidebar-color
$btn-close-bg: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23d4d4d4'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707A1 1 0 01.293.293z'/%3e%3c/svg%3e");

// Variáveis do projeto
$text-light: #d4d4d4;
$link-color: #3794ff;
$primary-blue: #007acc;
$accent-orange: #d19a66;
$error-color: #f48771;
$background-dark: #1e1e1e;

:root {
  --background-color: #242323;
  --sidebar-color: #272727;
  --text-color: #dfdfdf;
  --border-color: #3c3c3c;
  --scrollbar-color: #3c3c3c;
  --scrollbar-thumb-color: #1d1d1d;
  --header-color: #333333;
  --footer-color: #333333;
  --link-color: #3794ff;
  --primary-color: #152d3d;
  --background-dark: #1e1e1e;
  --primary-blue: #007acc;
  --accent-orange: #d19a66;
  --text-light: #d4d4d4;
  --input-bg: #252526;
  --error-color: #f48771;
}

// Estilos globais
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: $body-bg;
  color: $body-color;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

// Classes utilitárias
.container-dark {
  background: $background-dark;
  color: $text-light;
  padding: 20px;
}

.error-text {
  color: $error-color;
  font-size: 12px;
}

.btn-primary {
  background-color: $primary-blue;
  color: $text-light;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-primary:hover {
  background-color: color.adjust($primary-blue, $lightness: -10%);
}

.btn-success {
  background-color: #28a745;
  color: $text-light;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-success:hover {
  background-color: color.adjust(#28a745, $lightness: -10%);
}

.btn-danger {
  background-color: $error-color;
  color: $text-light;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-danger:hover {
  background-color: color.adjust($error-color, $lightness: -10%);
}

// Estilizar barras de rolagem
::-webkit-scrollbar {
  width: 8px;
}
::-webkit-scrollbar-track {
  background: $border-color;
}
::-webkit-scrollbar-thumb {
  background: #1d1d1d;
  border-radius: 4px;
}

// Ajustes para modais
.modal-content {
  background: $input-bg;
  color: $text-light;
  border: 1px solid $border-color;
}
.modal-header, .modal-footer {
  border-color: $border-color;
}
.form-control {
  background: $input-bg;
  color: $text-light;
  border-color: $border-color;
}
.form-control:focus {
  background: $input-bg;
  color: $text-light;
  border-color: $primary-blue;
  box-shadow: 0 0 0 0.25rem rgba(0, 122, 204, 0.25);
}
.invalid-feedback {
  color: $error-color;
}

.sidebar {
  background: var(--sidebar-color);
  width: 250px;
  min-height: 100vh;
  padding: 20px;
  border-right: 1px solid var(--border-color);
}

.header {
  background: var(--primary-blue);
  height: 60px;
  display: flex;
  align-items: center;
  padding: 0 20px;
  color: var(--text-light);
  font-size: 20px;
  font-weight: bold;
}

.main {
  background: var(--background-dark);
  padding: 20px;
  flex: 1;
}




==================================================
Arquivo: app\app.component.html
==================================================

<div class="app-container">
  <app-header></app-header>
  <div class="content-wrapper">
    <app-sidebar></app-sidebar>
    <main class="main">
      <router-outlet />
    </main>
  </div>
</div>



==================================================
Arquivo: app\app.component.scss
==================================================

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.content-wrapper {
  display: flex;
  flex: 1;
}

.main {
  flex: 1;
  padding: 20px;
  background: var(--background-dark);
}



==================================================
Arquivo: app\app.component.ts
==================================================

import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { HeaderComponent } from './shared/components/header/header.component';
import { SidebarComponent } from './shared/components/sidebar/sidebar.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, HeaderComponent, SidebarComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  title = 'front';
}



==================================================
Arquivo: app\app.config.ts
==================================================

import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';
import { provideClientHydration } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    provideClientHydration()
  ]
};



==================================================
Arquivo: app\app.routes.ts
==================================================

import { Routes } from '@angular/router';
import { DashboardComponent } from './pages/dashboard/dashboard.component';
import { PautaListComponent } from './pages/pautas/pauta-list/pauta-list.component';
import { PautaFormComponent } from './pages/pautas/pauta-form/pauta-form.component';
import { SessaoListComponent } from './pages/sessoes/sessao-list/sessao-list.component';
import { SessaoFormComponent } from './pages/sessoes/sessao-form/sessao-form.component';
import { VotoListComponent } from './pages/votos/voto-list/voto-list.component';
import { VotoFormComponent } from './pages/votos/voto-form/voto-form.component';
import { NotFoundComponent } from './pages/not-found/not-found.component';
import { IdentificarEleitorComponent } from './pages/identificar-eleitor/identificar-eleitor.component';

export const routes: Routes = [
  { path: '', component: IdentificarEleitorComponent },
  { path: 'dashboard', component: DashboardComponent },
  { path: 'pautas', component: PautaListComponent },
  { path: 'pautas/novo', component: PautaFormComponent },
  { path: 'pautas/:id', component: PautaFormComponent },
  { path: 'sessoes', component: SessaoListComponent },
  { path: 'sessoes/novo', component: SessaoFormComponent },
  { path: 'sessoes/:id', component: SessaoFormComponent },
  { path: 'votos', component: VotoListComponent },
  { path: 'votos/novo', component: VotoFormComponent },
  { path: 'votos/:id', component: VotoFormComponent },
  { path: '**', component: NotFoundComponent }
];



==================================================
Arquivo: app\models\api-error.model.ts
==================================================

export interface ApiError {
  message: string;
  status?: number;
  details?: any;
}



==================================================
Arquivo: app\models\dashboard.model.ts
==================================================

export interface DashboardResumoDTO {
  totalPautas: number;
  totalSessoesAbertas: number;
  totalSessoesEncerradas: number;
  totalVotos: number;
  percentualVotosSim: number;
  percentualVotosNao: number;
  pautasRecentes: PautaResumoDTO[];
  sessoesAtivas: SessaoResumoDTO[];
}

export interface PautaResumoDTO {
  id: number;
  titulo: string;
  totalVotos: number;
}

export interface SessaoResumoDTO {
  id: number;
  pautaId: number;
  pautaTitulo: string;
  tempoRestante: string;
}

export interface ParticipacaoSessaoDTO {
  sessaoId: number;
  pautaId: number;
  pautaTitulo: string;
  totalVotos: number;
  percentualParticipacao: number;
}

export interface TendenciaVotosDTO {
  periodo: string;
  votosSim: number;
  votosNao: number;
}



==================================================
Arquivo: app\models\pauta.model.ts
==================================================

export interface PautaRequestDTO {
  titulo: string;
  descricao: string;
}

export interface PautaResponseDTO {
  id: number;
  titulo: string;
  descricao: string;
}



==================================================
Arquivo: app\models\sessao-votacao.model.ts
==================================================

export interface SessaoVotacaoResponseDTO {
  id: number;
  pautaId: number;
  dataAbertura: string;
  dataFechamento: string;
}

export interface PautaResponseDTO {
  id: number;
  titulo: string;
  descricao: string;
}

export interface VotoRequestDTO {
  pautaId: number;
  cpf: string;
  voto: 'SIM' | 'NAO';
}

export interface VotoResponseDTO {
  id: number;
  pautaId: number;
  cpf: string;
  voto: 'SIM' | 'NAO';
}



==================================================
Arquivo: app\models\voto.model.ts
==================================================

export interface VotoRequestDTO {
  pautaId: number;
  cpf: string;
  voto: 'SIM' | 'NAO';
}

export interface VotoResponseDTO {
  id: number;
  pautaId: number;
  cpf: string;
  voto: 'SIM' | 'NAO';
}

export interface ResultadoResponseDTO {
  pautaId: number;
  titulo: string;
  votosSim: number;
  votosNao: number;
}

export interface SessaoAbertaDTO {
  id: number;
  pautaId: number;
  pautaTitulo: string;
  dataAbertura: string;
  dataFechamento: string;
  tempoRestante: string;
}



==================================================
Arquivo: app\pages\dashboard\dashboard.component.html
==================================================

<div class="dashboard-container">
  <h2>Dashboard</h2>

  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <div class="resumo-section" *ngIf="!isLoading">
    <div class="card">
      <h3>Total de Pautas</h3>
      <p>{{ resumo.totalPautas }}</p>
    </div>
    <div class="card">
      <h3>Sessões Abertas</h3>
      <p>{{ resumo.totalSessoesAbertas }}</p>
    </div>
    <div class="card">
      <h3>Total de Votos</h3>
      <p>{{ resumo.totalVotos }}</p>
    </div>
    <div class="card">
      <h3>Votos Hoje</h3>
      <p>{{ votosHoje }}</p>
    </div>
    <div class="card">
      <h3>Sessões Abertas Hoje</h3>
      <p>{{ sessoesAbertasHoje }}</p>
    </div>
  </div>

  <div class="section" *ngIf="!isLoading && participacaoSessoes.length">
    <h3>Participação em Sessões</h3>
    <table class="dashboard-table">
      <thead>
      <tr>
        <th>ID da Sessão</th>
        <th>ID da Pauta</th>
        <th>Título da Pauta</th>
        <th>Total de Votos</th>
        <th>Percentual de Participação</th>
      </tr>
      </thead>
      <tbody>
      <tr *ngFor="let sessao of participacaoSessoes">
        <td>{{ sessao.sessaoId }}</td>
        <td>{{ sessao.pautaId }}</td>
        <td>{{ sessao.pautaTitulo }}</td>
        <td>{{ sessao.totalVotos }}</td>
        <td>{{ sessao.percentualParticipacao }}%</td>
      </tr>
      </tbody>
    </table>
  </div>
  <div class="no-data" *ngIf="!isLoading && !participacaoSessoes.length">
    Nenhuma sessão encontrada
  </div>

  <div class="section" *ngIf="!isLoading && tendenciaVotos.length">
    <h3>Tendência de Votos</h3>
    <table class="dashboard-table">
      <thead>
      <tr>
        <th>Período</th>
        <th>Votos Sim</th>
        <th>Votos Não</th>
      </tr>
      </thead>
      <tbody>
      <tr *ngFor="let tendencia of tendenciaVotos">
        <td>{{ tendencia.periodo }}</td>
        <td>{{ tendencia.votosSim }}</td>
        <td>{{ tendencia.votosNao }}</td>
      </tr>
      </tbody>
    </table>
  </div>
  <div class="no-data" *ngIf="!isLoading && !tendenciaVotos.length">
    Nenhuma tendência de votos encontrada
  </div>
</div>



==================================================
Arquivo: app\pages\dashboard\dashboard.component.scss
==================================================

@use 'sass:color';

$primary-blue: #007acc;

.dashboard-container {
  background: var(--background-dark);
  color: var(--text-light);
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

h2 {
  margin-bottom: 20px;
  font-size: 24px;
  color: var(--text-light);
}

.error-message {
  color: var(--error-color);
  font-size: 12px;
  margin-bottom: 15px;
}

.loading {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

.resumo-section {
  display: flex;
  gap: 20px;
  margin-bottom: 30px;
  flex-wrap: wrap;
}

.card {
  flex: 1;
  min-width: 200px;
  padding: 15px;
  background: var(--input-bg);
  border: 1px solid var(--border-color);
  border-radius: 4px;
  text-align: center;
}

.card h3 {
  margin-bottom: 10px;
  font-size: 18px;
  color: var(--text-light);
}

.card p {
  font-size: 24px;
  color: var(--primary-blue);
}

.section {
  margin-bottom: 30px;
}

.section h3 {
  margin-bottom: 15px;
  font-size: 20px;
  color: var(--text-light);
}

.dashboard-table {
  width: 100%;
  border-collapse: collapse;
  background: var(--input-bg);
}

.dashboard-table th,
.dashboard-table td {
  padding: 10px;
  border: 1px solid var(--border-color);
  text-align: left;
  color: var(--text-light);
}

.dashboard-table th {
  background-color: var(--header-color);
  font-weight: bold;
}

.no-data {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

@media (max-width: 768px) {
  .resumo-section {
    flex-direction: column;
  }

  .card {
    min-width: 100%;
  }
}



==================================================
Arquivo: app\pages\dashboard\dashboard.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardComponent } from './dashboard.component';

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DashboardComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\dashboard\dashboard.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DashboardService } from '../../services/dashboard.service';
import { DashboardResumoDTO, ParticipacaoSessaoDTO, TendenciaVotosDTO } from '../../models/dashboard.model';
import { ApiError } from '../../models/api-error.model';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  resumo: DashboardResumoDTO = {
    totalPautas: 0,
    totalSessoesAbertas: 0,
    totalSessoesEncerradas: 0,
    totalVotos: 0,
    percentualVotosSim: 0,
    percentualVotosNao: 0,
    pautasRecentes: [],
    sessoesAtivas: []
  };
  participacaoSessoes: ParticipacaoSessaoDTO[] = [];
  tendenciaVotos: TendenciaVotosDTO[] = [];
  votosHoje: number = 0;
  sessoesAbertasHoje: number = 0;
  isLoading = false;
  error: string | null = null;
  private pendingRequests = 0;

  constructor(private dashboardService: DashboardService) {}

  ngOnInit(): void {
    this.loadDashboardData();
  }

  private trackLoadingStart(): void {
    this.pendingRequests++;
    this.isLoading = true;
  }

  private trackLoadingComplete(): void {
    this.pendingRequests--;
    if (this.pendingRequests === 0) {
      this.isLoading = false;
    }
  }

  loadDashboardData(): void {
    this.error = null;

    this.trackLoadingStart();
    this.dashboardService.getResumo().subscribe({
      next: (resumo: DashboardResumoDTO) => { this.resumo = resumo; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar resumo'; },
      complete: () => { this.trackLoadingComplete(); }
    });

    this.trackLoadingStart();
    this.dashboardService.getParticipacaoSessoes().subscribe({
      next: (participacao: ParticipacaoSessaoDTO[]) => { this.participacaoSessoes = participacao; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar participação em sessões'; },
      complete: () => { this.trackLoadingComplete(); }
    });

    this.trackLoadingStart();
    this.dashboardService.getTendenciaVotos().subscribe({
      next: (tendencia: TendenciaVotosDTO[]) => { this.tendenciaVotos = tendencia; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar tendência de votos'; },
      complete: () => { this.trackLoadingComplete(); }
    });

    this.trackLoadingStart();
    this.dashboardService.getVotosHoje().subscribe({
      next: (votosHoje: number) => { this.votosHoje = votosHoje; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar votos de hoje'; },
      complete: () => { this.trackLoadingComplete(); }
    });

    this.trackLoadingStart();
    this.dashboardService.getSessoesAbertasHoje().subscribe({
      next: (sessoesAbertasHoje: number) => { this.sessoesAbertasHoje = sessoesAbertasHoje; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar sessões abertas de hoje'; },
      complete: () => { this.trackLoadingComplete(); }
    });
  }
}



==================================================
Arquivo: app\pages\identificar-eleitor\identificar-eleitor.component.html
==================================================

<div class="identificar-eleitor container-dark">
  <h2>Identificação do Eleitor</h2>
  <form [formGroup]="form" (ngSubmit)="onSubmit()" class="identificar-form">
    <div class="form-field">
      <label for="cpf">CPF</label>
      <input
        formControlName="cpf"
        id="cpf"
        type="text"
        mask="000.000.000-00"
        placeholder="Digite seu CPF"
      />
      <div class="error" *ngIf="form.get('cpf')?.invalid && form.get('cpf')?.touched">
        <span *ngIf="form.get('cpf')?.errors?.['required']">CPF é obrigatório</span>
        <span *ngIf="form.get('cpf')?.errors?.['pattern']">Formato de CPF inválido</span>
      </div>
    </div>
    <div class="form-actions">
      <button type="submit" [disabled]="form.invalid || isLoading" class="btn-primary">
        Continuar
      </button>
    </div>
  </form>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Validando...</div>
</div>



==================================================
Arquivo: app\pages\identificar-eleitor\identificar-eleitor.component.scss
==================================================

.identificar-eleitor {
  padding: 40px;
  max-width: 400px;
  margin: 0 auto;
  text-align: center;
}

h2 {
  font-size: 24px;
  margin-bottom: 20px;
  color: var(--text-light);
}

.identificar-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.form-field {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.form-field label {
  font-weight: bold;
  color: var(--text-light);
}

.form-field input {
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background: var(--input-bg);
  color: var(--text-light);
}

.form-field input:focus {
  border-color: var(--primary-blue);
  box-shadow: 0 0 0 0.25rem rgba(0, 122, 204, 0.25);
}

.form-field .error {
  color: var(--error-color);
  font-size: 12px;
}

.form-actions {
  display: flex;
  justify-content: center;
}

.error-message {
  color: var(--error-color);
  font-size: 14px;
  margin-top: 15px;
}

.loading {
  text-align: center;
  font-size: 16px;
  margin-top: 15px;
  color: var(--text-light);
}



==================================================
Arquivo: app\pages\identificar-eleitor\identificar-eleitor.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { IdentificarEleitorComponent } from './identificar-eleitor.component';

describe('IdentificarEleitorComponent', () => {
  let component: IdentificarEleitorComponent;
  let fixture: ComponentFixture<IdentificarEleitorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [IdentificarEleitorComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(IdentificarEleitorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\identificar-eleitor\identificar-eleitor.component.ts
==================================================

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { NgxMaskDirective } from 'ngx-mask';
import { EleitorService } from '../../services/eleitor.service';
import { ApiError } from '../../models/api-error.model';

@Component({
  selector: 'app-identificar-eleitor',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule, NgxMaskDirective],
  templateUrl: './identificar-eleitor.component.html',
  styleUrls: ['./identificar-eleitor.component.scss']
})
export class IdentificarEleitorComponent {
  form: FormGroup;
  isLoading = false;
  error: string | null = null;

  constructor(
    private fb: FormBuilder,
    private eleitorService: EleitorService,
    private router: Router
  ) {
    this.form = this.fb.group({
      cpf: ['', [Validators.required, Validators.pattern(/^\d{3}\.\d{3}\.\d{3}-\d{2}$/)]]
    });
  }

  onSubmit(): void {
    if (this.form.invalid) return;

    this.isLoading = true;
    this.error = null;
    const cpf = this.form.value.cpf.replace(/[^\d]/g, '');

    this.eleitorService.validarCpf(cpf).subscribe({
      next: (response) => {
        if (response.status === 'ABLE_TO_VOTE') {
          this.router.navigate(['/votos/novo'], { queryParams: { cpf } });
        } else {
          this.error = 'CPF não habilitado para votação';
        }
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao validar CPF';
        this.isLoading = false;
      }
    });
  }
}



==================================================
Arquivo: app\pages\not-found\not-found.component.html
==================================================

<div class="not-found container-dark">
  <h2>Página Não Encontrada</h2>
  <p>A página que você está procurando não existe.</p>
  <a routerLink="/dashboard" class="btn-primary">Voltar para o Dashboard</a>
</div>



==================================================
Arquivo: app\pages\not-found\not-found.component.scss
==================================================

.not-found {
  text-align: center;
  padding: 40px;
}

h2 {
  font-size: 24px;
  margin-bottom: 20px;
}

p {
  font-size: 16px;
  margin-bottom: 20px;
}



==================================================
Arquivo: app\pages\not-found\not-found.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NotFoundComponent } from './not-found.component';

describe('NotFoundComponent', () => {
  let component: NotFoundComponent;
  let fixture: ComponentFixture<NotFoundComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [NotFoundComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(NotFoundComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\not-found\not-found.component.ts
==================================================

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-not-found',
  standalone: true,
  imports: [CommonModule, RouterLink],
  templateUrl: './not-found.component.html',
  styleUrl: './not-found.component.scss'
})
export class NotFoundComponent {}



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.html
==================================================

<div class="pauta-form container-dark">
  <app-dynamic-crud
    [config]="config"
    [initialData]="[pauta]"
    [isLoading]="isLoading"
    [error]="error"
    (onCreate)="savePauta($event)"
    (onUpdate)="savePauta($event.data)"
  ></app-dynamic-crud>
</div>



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.scss
==================================================

/* src/app/pages/pautas/pauta-form/pauta-form.component.scss */
:host {
  display: block;
  padding: 20px;
  background: var(--background-dark);
  color: var(--text-light);
}

app-dynamic-crud {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
}



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PautaFormComponent } from './pauta-form.component';

describe('PautaFormComponent', () => {
  let component: PautaFormComponent;
  let fixture: ComponentFixture<PautaFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PautaFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(PautaFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { DynamicCrudComponent, DynamicTableConfig } from '../../../shared/dynamic-crud/dynamic-crud.component';
import { PautaService } from '../../../services/pauta.service';
import { PautaRequestDTO, PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-pauta-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    DynamicCrudComponent
  ],
  templateUrl: './pauta-form.component.html',
  styleUrls: ['./pauta-form.component.scss']
})
export class PautaFormComponent implements OnInit {
  pauta: PautaRequestDTO | PautaResponseDTO = { titulo: '', descricao: '' };
  isLoading = false;
  error: string | null = null;
  isEditMode = false;

  config: DynamicTableConfig = {
    title: 'Gerenciar Pauta',
    fields: [
      {
        name: 'titulo',
        label: 'Título',
        type: 'input',
        dataType: 'string',
        required: true,
        maxLength: 100,
        showInTable: false,
        filterable: false,
        disabled: false
      },
      {
        name: 'descricao',
        label: 'Descrição',
        type: 'textarea',
        dataType: 'string',
        required: true,
        maxLength: 500,
        showInTable: false,
        filterable: false,
        disabled: false
      }
    ],
    actions: {
      view: false,
      edit: false,
      delete: false
    }
  };

  constructor(
    private pautaService: PautaService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.isEditMode = true;
      this.loadPauta(+id);
    }
  }

  loadPauta(id: number): void {
    this.isLoading = true;
    this.pautaService.getById(id).subscribe({
      next: (pauta: PautaResponseDTO) => {
        this.pauta = pauta;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pauta';
        this.isLoading = false;
      }
    });
  }

  savePauta(data: PautaRequestDTO): void {
    this.isLoading = true;
    const action = this.isEditMode && (this.pauta as PautaResponseDTO).id
      ? this.pautaService.update((this.pauta as PautaResponseDTO).id, data)
      : this.pautaService.create(data);

    action.subscribe({
      next: () => {
        this.isLoading = false;
        this.router.navigate(['/pautas']);
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao salvar pauta';
        this.isLoading = false;
      }
    });
  }
}



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.html
==================================================

<!-- src/app/pages/pautas/pauta-list/pauta-list.component.html -->
<app-dynamic-crud
  [config]="config"
  [initialData]="pautas"
  [isLoading]="isLoading"
  [error]="error"
  (onCreate)="createPauta($event)"
  (onUpdate)="updatePauta($event)"
  (onRemove)="deletePauta($event)"
  (onLoadData)="loadPautas()"
  (onView)="viewPauta($event)"
>
</app-dynamic-crud>



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.scss
==================================================

/* src/app/pages/pautas/pauta-list/pauta-list.component.scss */
:host {
  display: block;
  padding: 20px;
  background: var(--background-dark);
  color: var(--text-light);
}

app-dynamic-crud {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PautaListComponent } from './pauta-list.component';

describe('PautaListComponent', () => {
  let component: PautaListComponent;
  let fixture: ComponentFixture<PautaListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PautaListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(PautaListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { DynamicCrudComponent, DynamicTableConfig } from '../../../shared/dynamic-crud/dynamic-crud.component';
import { PautaService } from '../../../services/pauta.service';
import { PautaRequestDTO, PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-pauta-list',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    DynamicCrudComponent
  ],
  templateUrl: './pauta-list.component.html',
  styleUrls: ['./pauta-list.component.scss']
})
export class PautaListComponent implements OnInit {
  pautas: PautaResponseDTO[] = [];
  isLoading = false;
  error: string | null = null;

  config: DynamicTableConfig = {
    title: 'Lista de Pautas',
    fields: [
      {
        name: 'titulo',
        label: 'Título',
        type: 'input',
        dataType: 'string',
        required: true,
        maxLength: 100,
        showInTable: true,
        filterable: true,
        disabled: false
      },
      {
        name: 'descricao',
        label: 'Descrição',
        type: 'textarea',
        dataType: 'string',
        required: true,
        maxLength: 500,
        showInTable: true,
        filterable: true,
        disabled: false
      }
    ],
    actions: {
      view: true,
      edit: true,
      delete: true
    }
  };

  constructor(private pautaService: PautaService, private router: Router) {}

  ngOnInit(): void {
    this.loadPautas();
  }

  loadPautas(): void {
    this.isLoading = true;
    this.pautaService.getAll().subscribe({
      next: (pautas: PautaResponseDTO[]) => {
        this.pautas = pautas;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pautas';
        this.isLoading = false;
      }
    });
  }

  createPauta(data: PautaRequestDTO): void {
    this.isLoading = true;
    this.pautaService.create(data).subscribe({
      next: () => this.loadPautas(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao criar pauta';
        this.isLoading = false;
      }
    });
  }

  updatePauta(event: { id: number, data: PautaRequestDTO }): void {
    this.isLoading = true;
    this.pautaService.update(event.id, event.data).subscribe({
      next: () => this.loadPautas(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao atualizar pauta';
        this.isLoading = false;
      }
    });
  }

  deletePauta(id: number): void {
    this.isLoading = true;
    this.pautaService.delete(id).subscribe({
      next: () => this.loadPautas(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao deletar pauta';
        this.isLoading = false;
      }
    });
  }

  viewPauta(item: PautaResponseDTO): void {
    this.router.navigate([`/pautas/${item.id}`]);
  }
}



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.html
==================================================

<div class="sessao-form container-dark">
  <app-dynamic-crud
    [config]="config"
    [initialData]="[sessao]"
    [isLoading]="isLoading"
    [error]="error"
    (onCreate)="saveSessao($event)"
    (onUpdate)="saveSessao($event.data)"
  ></app-dynamic-crud>
</div>



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.scss
==================================================

/* src/app/pages/sessoes/sessao-form/sessao-form.component.scss */
:host {
  display: block;
  padding: 20px;
  background: var(--background-dark);
  color: var(--text-light);
}

app-dynamic-crud {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
}



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SessaoFormComponent } from './sessao-form.component';

describe('SessaoFormComponent', () => {
  let component: SessaoFormComponent;
  let fixture: ComponentFixture<SessaoFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SessaoFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SessaoFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { DynamicCrudComponent, DynamicTableConfig } from '../../../shared/dynamic-crud/dynamic-crud.component';
import { SessaoVotacaoService } from '../../../services/sessao-votacao.service';
import { SessaoVotacaoRequestDTO, SessaoVotacaoResponseDTO } from '../../../models/sessao-votacao.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-sessao-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    DynamicCrudComponent
  ],
  templateUrl: './sessao-form.component.html',
  styleUrls: ['./sessao-form.component.scss']
})
export class SessaoFormComponent implements OnInit {
  sessao: SessaoVotacaoRequestDTO | SessaoVotacaoResponseDTO = { pautaId: 0 };
  isLoading = false;
  error: string | null = null;
  isEditMode = false;

  config: DynamicTableConfig = {
    title: 'Gerenciar Sessão de Votação',
    fields: [
      {
        name: 'pautaId',
        label: 'ID da Pauta',
        type: 'input',
        dataType: 'number',
        required: true,
        minValue: 1,
        showInTable: false,
        filterable: false,
        disabled: false
      },
      {
        name: 'dataAbertura',
        label: 'Data e Hora de Abertura',
        type: 'input',
        dataType: 'date',
        required: true,
        showInTable: false,
        filterable: false,
        disabled: false
      },
      {
        name: 'dataFechamento',
        label: 'Data e Hora de Fechamento',
        type: 'input',
        dataType: 'date',
        required: false,
        showInTable: false,
        filterable: false,
        disabled: false
      }
    ],
    actions: {
      view: false,
      edit: false,
      delete: false
    }
  };

  constructor(
    private sessaoService: SessaoVotacaoService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.isEditMode = true;
      this.loadSessao(+id);
    }
  }

  loadSessao(id: number): void {
    this.isLoading = true;
    this.sessaoService.getById(id).subscribe({
      next: (sessao: SessaoVotacaoResponseDTO) => {
        this.sessao = sessao;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar sessão';
        this.isLoading = false;
      }
    });
  }

  saveSessao(data: SessaoVotacaoRequestDTO & { dataAbertura?: string, dataFechamento?: string }): void {
    this.isLoading = true;

    // Validar que dataFechamento é posterior a dataAbertura, se fornecida
    if (data.dataFechamento && data.dataAbertura) {
      const abertura = new Date(data.dataAbertura);
      const fechamento = new Date(data.dataFechamento);
      if (fechamento <= abertura) {
        this.error = 'Data de fechamento deve ser posterior à data de abertura';
        this.isLoading = false;
        return;
      }
    }

    const action = this.isEditMode && (this.sessao as SessaoVotacaoResponseDTO).id
      ? this.sessaoService.update((this.sessao as SessaoVotacaoResponseDTO).id, data)
      : this.sessaoService.create(data);

    action.subscribe({
      next: () => {
        this.isLoading = false;
        this.router.navigate(['/sessoes']);
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao salvar sessão';
        this.isLoading = false;
      }
    });
  }
}



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.html
==================================================

<!-- src/app/pages/sessoes/sessao-list/sessao-list.component.html -->
<app-dynamic-crud
  [config]="config"
  [initialData]="sessoes"
  [isLoading]="isLoading"
  [error]="error"
  (onCreate)="createSessao($event)"
  (onUpdate)="updateSessao($event)"
  (onRemove)="deleteSessao($event)"
  (onLoadData)="loadSessoes()"
  (onView)="viewSessao($event)"
>
</app-dynamic-crud>



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.scss
==================================================

/* src/app/pages/sessoes/sessao-list/sessao-list.component.scss */
:host {
  display: block;
  padding: 20px;
  background: var(--background-dark);
  color: var(--text-light);
}

app-dynamic-crud {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SessaoListComponent } from './sessao-list.component';

describe('SessaoListComponent', () => {
  let component: SessaoListComponent;
  let fixture: ComponentFixture<SessaoListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SessaoListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SessaoListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { DynamicCrudComponent, DynamicTableConfig } from '../../../shared/dynamic-crud/dynamic-crud.component';
import { SessaoVotacaoService } from '../../../services/sessao-votacao.service';
import { SessaoVotacaoRequestDTO, SessaoVotacaoResponseDTO } from '../../../models/sessao-votacao.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-sessao-list',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    DynamicCrudComponent
  ],
  templateUrl: './sessao-list.component.html',
  styleUrls: ['./sessao-list.component.scss']
})
export class SessaoListComponent implements OnInit {
  sessoes: SessaoVotacaoResponseDTO[] = [];
  isLoading = false;
  error: string | null = null;

  config: DynamicTableConfig = {
    title: 'Lista de Sessões de Votação',
    fields: [
      {
        name: 'pautaId',
        label: 'ID da Pauta',
        type: 'input',
        dataType: 'number',
        required: true,
        minValue: 1,
        showInTable: true,
        filterable: true,
        disabled: false
      },
      {
        name: 'dataAbertura',
        label: 'Data de Abertura',
        type: 'date',
        dataType: 'date',
        required: true,
        showInTable: true,
        filterable: true,
        disabled: false
      },
      {
        name: 'dataFechamento',
        label: 'Data de Fechamento',
        type: 'date',
        dataType: 'date',
        required: true,
        showInTable: true,
        filterable: true,
        disabled: false
      }
    ],
    actions: {
      view: true,
      edit: true,
      delete: true
    }
  };

  constructor(private sessaoService: SessaoVotacaoService, private router: Router) {}

  ngOnInit(): void {
    this.loadSessoes();
  }

  loadSessoes(): void {
    this.isLoading = true;
    this.sessaoService.getAll().subscribe({
      next: (sessoes: SessaoVotacaoResponseDTO[]) => {
        this.sessoes = sessoes;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar sessões';
        this.isLoading = false;
      }
    });
  }

  createSessao(data: SessaoVotacaoRequestDTO): void {
    this.isLoading = true;
    this.sessaoService.create(data).subscribe({
      next: () => this.loadSessoes(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao criar sessão';
        this.isLoading = false;
      }
    });
  }

  updateSessao(event: { id: number, data: SessaoVotacaoRequestDTO }): void {
    this.isLoading = true;
    this.sessaoService.update(event.id, event.data).subscribe({
      next: () => this.loadSessoes(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao atualizar sessão';
        this.isLoading = false;
      }
    });
  }

  deleteSessao(id: number): void {
    this.isLoading = true;
    this.sessaoService.delete(id).subscribe({
      next: () => this.loadSessoes(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao deletar sessão';
        this.isLoading = false;
      }
    });
  }

  viewSessao(item: SessaoVotacaoResponseDTO): void {
    this.router.navigate([`/sessoes/${item.id}`]);
  }
}



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.html
==================================================

<div class="voto-form container-dark">
  <h2>{{ config.title }}</h2>

  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <app-dynamic-crud
    [config]="config"
    [initialData]="sessoesAbertas"
    [isLoading]="isLoading"
    [error]="error"
    (onLoadData)="loadSessoesAbertas()"
  >
    <ng-template let-item>
      <td>{{ item.pautaTitulo }}</td>
      <td>{{ item.dataAbertura | date:'short' }}</td>
      <td>{{ item.dataFechamento | date:'short' }}</td>
      <td><app-timer [dataFechamento]="item.dataFechamento"></app-timer></td>
      <td>
        <button
          class="btn-success"
          [ngClass]="{ 'selected': selectedVoto[item.id] === 'SIM' }"
          (click)="selectVoto(item.id, 'SIM')"
        >Sim</button>
        <button
          class="btn-danger"
          [ngClass]="{ 'selected': selectedVoto[item.id] === 'NAO' }"
          (click)="selectVoto(item.id, 'NAO')"
        >Não</button>
        <button
          class="btn-primary"
          [disabled]="!selectedVoto[item.id]"
          (click)="confirmarVoto(item)"
        >Confirmar Voto</button>
      </td>
    </ng-template>
  </app-dynamic-crud>

  <div *ngIf="!sessoesAbertas.length && !isLoading" class="no-data">
    Nenhuma sessão de votação aberta disponível
  </div>
</div>



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.scss
==================================================

.voto-form {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

h2 {
  font-size: 24px;
  margin-bottom: 20px;
  color: var(--text-light);
}

.error-message {
  color: var(--error-color);
  font-size: 14px;
  margin-bottom: 15px;
}

.loading {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

.no-data {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

.selected {
  background-color: var(--accent-orange);
}

.btn-success,
.btn-danger,
.btn-primary {
  margin-right: 5px;
}



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VotoFormComponent } from './voto-form.component';

describe('VotoFormComponent', () => {
  let component: VotoFormComponent;
  let fixture: ComponentFixture<VotoFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [VotoFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(VotoFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { DynamicCrudComponent, DynamicTableConfig } from '../../../shared/dynamic-crud/dynamic-crud.component';
import { VotoService } from '../../../services/voto.service';
import { VotoRequestDTO, VotoResponseDTO, SessaoAbertaDTO } from '../../../models/voto.model';
import { ApiError } from '../../../models/api-error.model';
import { TimerComponent } from '../../../shared/components/timer/timer.component';
import { NotificationService } from '../../../shared/services/notification.service';

@Component({
  selector: 'app-voto-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    DynamicCrudComponent,
    TimerComponent
  ],
  templateUrl: './voto-form.component.html',
  styleUrls: ['./voto-form.component.scss']
})
export class VotoFormComponent implements OnInit {
  sessoesAbertas: SessaoAbertaDTO[] = [];
  selectedVoto: { [key: number]: 'SIM' | 'NAO' | null } = {};
  isLoading = false;
  error: string | null = null;
  cpf: string | null = null;

  config: DynamicTableConfig = {
    title: 'Sessões de Votação Abertas',
    fields: [
      {
        name: 'pautaTitulo',
        label: 'Título da Pauta',
        type: 'input',
        dataType: 'string',
        required: false,
        showInTable: true,
        filterable: true,
        disabled: true
      },
      {
        name: 'dataAbertura',
        label: 'Data de Abertura',
        type: 'date',
        dataType: 'date',
        required: false,
        showInTable: true,
        filterable: false,
        disabled: true
      },
      {
        name: 'dataFechamento',
        label: 'Data de Fechamento',
        type: 'date',
        dataType: 'date',
        required: false,
        showInTable: true,
        filterable: false,
        disabled: true
      },
      {
        name: 'tempoRestante',
        label: 'Tempo Restante',
        type: 'input',
        dataType: 'string',
        required: false,
        showInTable: true,
        filterable: false,
        disabled: true
      }
    ],
    actions: {
      view: false,
      edit: false,
      delete: false
    }
  };

  constructor(
    private votoService: VotoService,
    private route: ActivatedRoute,
    private router: Router,
    private notificationService: NotificationService
  ) {}

  ngOnInit(): void {
    this.cpf = this.route.snapshot.queryParams['cpf'];
    if (!this.cpf) {
      this.error = 'CPF não fornecido';
      this.router.navigate(['/']);
      return;
    }
    this.loadSessoesAbertas();
  }

  loadSessoesAbertas(): void {
    this.isLoading = true;
    this.votoService.getSessoesAbertasNaoVotadas(this.cpf!).subscribe({
      next: (sessoes: SessaoAbertaDTO[]) => {
        this.sessoesAbertas = sessoes;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar sessões abertas';
        this.isLoading = false;
      }
    });
  }

  selectVoto(sessaoId: number, voto: 'SIM' | 'NAO'): void {
    this.selectedVoto[sessaoId] = voto;
  }

  confirmarVoto(sessao: SessaoAbertaDTO): void {
    const voto = this.selectedVoto[sessao.id];
    if (!voto) {
      this.notificationService.showError('Selecione Sim ou Não antes de confirmar');
      return;
    }

    const votoRequest: VotoRequestDTO = {
      pautaId: sessao.pautaId,
      cpf: this.cpf!,
      voto
    };

    this.isLoading = true;
    this.votoService.create(votoRequest).subscribe({
      next: () => {
        this.notificationService.showSuccess('Voto registrado com sucesso!');
        this.loadSessoesAbertas();
        delete this.selectedVoto[sessao.id];
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao registrar voto';
        this.isLoading = false;
      }
    });
  }
}



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.html
==================================================

<!-- src/app/pages/votos/voto-list/voto-list.component.html -->
<app-dynamic-crud
  [config]="config"
  [initialData]="votos"
  [isLoading]="isLoading"
  [error]="error"
  (onCreate)="createVoto($event)"
  (onUpdate)="updateVoto($event)"
  (onRemove)="deleteVoto($event)"
  (onLoadData)="loadVotos()"
  (onView)="viewVoto($event)"
>
</app-dynamic-crud>



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.scss
==================================================

/* src/app/pages/votos/voto-list/voto-list.component.scss */
:host {
  display: block;
  padding: 20px;
  background: var(--background-dark);
  color: var(--text-light);
}

app-dynamic-crud {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VotoListComponent } from './voto-list.component';

describe('VotoListComponent', () => {
  let component: VotoListComponent;
  let fixture: ComponentFixture<VotoListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [VotoListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(VotoListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { DynamicCrudComponent, DynamicTableConfig } from '../../../shared/dynamic-crud/dynamic-crud.component';
import { VotoService } from '../../../services/voto.service';
import { VotoRequestDTO, VotoResponseDTO } from '../../../models/voto.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-voto-list',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    DynamicCrudComponent
  ],
  templateUrl: './voto-list.component.html',
  styleUrls: ['./voto-list.component.scss']
})
export class VotoListComponent implements OnInit {
  votos: VotoResponseDTO[] = [];
  isLoading = false;
  error: string | null = null;

  config: DynamicTableConfig = {
    title: 'Lista de Votos',
    fields: [
      {
        name: 'pautaId',
        label: 'ID da Pauta',
        type: 'input',
        dataType: 'number',
        required: true,
        minValue: 1,
        showInTable: true,
        filterable: true,
        disabled: false
      },
      {
        name: 'cpf',
        label: 'CPF',
        type: 'input',
        dataType: 'string',
        required: true,
        mask: '000.000.000-00',
        pattern: /^\d{3}\.\d{3}\.\d{3}-\d{2}$/,
        showInTable: true,
        filterable: true,
        disabled: false
      },
      {
        name: 'voto',
        label: 'Voto',
        type: 'dropdown',
        dataType: 'string',
        required: true,
        options: ['SIM', 'NAO'],
        showInTable: true,
        filterable: true,
        disabled: false
      }
    ],
    actions: {
      view: true,
      edit: true,
      delete: true
    }
  };

  constructor(private votoService: VotoService, private router: Router) {}

  ngOnInit(): void {
    this.loadVotos();
  }

  loadVotos(): void {
    this.isLoading = true;
    this.votoService.getAll().subscribe({
      next: (votos: VotoResponseDTO[]) => {
        this.votos = votos;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar votos';
        this.isLoading = false;
      }
    });
  }

  createVoto(data: VotoRequestDTO): void {
    this.isLoading = true;
    this.votoService.create(data).subscribe({
      next: () => this.loadVotos(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao registrar voto';
        this.isLoading = false;
      }
    });
  }

  updateVoto(event: { id: number, data: VotoRequestDTO }): void {
    this.isLoading = true;
    this.votoService.update(event.id, event.data).subscribe({
      next: () => this.loadVotos(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao atualizar voto';
        this.isLoading = false;
      }
    });
  }

  deleteVoto(id: number): void {
    this.isLoading = true;
    this.votoService.delete(id).subscribe({
      next: () => this.loadVotos(),
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao deletar voto';
        this.isLoading = false;
      }
    });
  }

  viewVoto(item: VotoResponseDTO): void {
    this.router.navigate([`/votos/${item.id}`]);
  }
}



==================================================
Arquivo: app\services\dashboard.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DashboardResumoDTO, ParticipacaoSessaoDTO, TendenciaVotosDTO } from '../models/dashboard.model';

@Injectable({
  providedIn: 'root'
})
export class DashboardService {
  private apiUrl = 'http://localhost:8080/api/v1/dashboard';

  constructor(private http: HttpClient) {}

  getResumo(): Observable<DashboardResumoDTO> {
    return this.http.get<DashboardResumoDTO>(`${this.apiUrl}/resumo`);
  }

  getParticipacaoSessoes(): Observable<ParticipacaoSessaoDTO[]> {
    return this.http.get<ParticipacaoSessaoDTO[]>(`${this.apiUrl}/participacao-sessoes`);
  }

  getTendenciaVotos(): Observable<TendenciaVotosDTO[]> {
    return this.http.get<TendenciaVotosDTO[]>(`${this.apiUrl}/tendencia-votos`);
  }

  getVotosHoje(): Observable<number> {
    return this.http.get<number>(`${this.apiUrl}/votos-hoje`);
  }

  getSessoesAbertasHoje(): Observable<number> {
    return this.http.get<number>(`${this.apiUrl}/sessoes-abertas-hoje`);
  }
}



==================================================
Arquivo: app\services\eleitor.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';

interface ValidarCpfResponse {
  status: 'ABLE_TO_VOTE' | 'UNABLE_TO_VOTE';
}

@Injectable({
  providedIn: 'root'
})
export class EleitorService {
  private apiUrl = `${environment.apiUrl}/eleitores`;

  constructor(private http: HttpClient) {}

  validarCpf(cpf: string): Observable<ValidarCpfResponse> {
    return this.http.post<ValidarCpfResponse>(`${this.apiUrl}/validar`, { cpf });
  }
}



==================================================
Arquivo: app\services\pauta.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { PautaRequestDTO, PautaResponseDTO } from '../models/pauta.model';

@Injectable({
  providedIn: 'root'
})
export class PautaService {
  private apiUrl = `${environment.apiUrl}/pautas`;

  constructor(private http: HttpClient) {}

  create(pauta: PautaRequestDTO): Observable<PautaResponseDTO> {
    return this.http.post<PautaResponseDTO>(this.apiUrl, pauta);
  }

  getAll(): Observable<PautaResponseDTO[]> {
    return this.http.get<PautaResponseDTO[]>(this.apiUrl);
  }

  getById(id: number): Observable<PautaResponseDTO> {
    return this.http.get<PautaResponseDTO>(`${this.apiUrl}/${id}`);
  }

  update(id: number, pauta: PautaRequestDTO): Observable<PautaResponseDTO> {
    return this.http.put<PautaResponseDTO>(`${this.apiUrl}/${id}`, pauta);
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}



==================================================
Arquivo: app\services\sessao-votacao.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { SessaoVotacaoRequestDTO, SessaoVotacaoResponseDTO } from '../models/sessao-votacao.model';

@Injectable({
  providedIn: 'root'
})
export class SessaoVotacaoService {
  private apiUrl = `${environment.apiUrl}/sessoes`;

  constructor(private http: HttpClient) {}

  create(sessao: SessaoVotacaoRequestDTO): Observable<SessaoVotacaoResponseDTO> {
    return this.http.post<SessaoVotacaoResponseDTO>(this.apiUrl, sessao);
  }

  getAll(): Observable<SessaoVotacaoResponseDTO[]> {
    return this.http.get<SessaoVotacaoResponseDTO[]>(this.apiUrl);
  }

  getById(id: number): Observable<SessaoVotacaoResponseDTO> {
    return this.http.get<SessaoVotacaoResponseDTO>(`${this.apiUrl}/${id}`);
  }

  update(id: number, sessao: SessaoVotacaoRequestDTO): Observable<SessaoVotacaoResponseDTO> {
    return this.http.put<SessaoVotacaoResponseDTO>(`${this.apiUrl}/${id}`, sessao);
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}



==================================================
Arquivo: app\services\voto.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { VotoRequestDTO, VotoResponseDTO, ResultadoResponseDTO, SessaoAbertaDTO } from '../models/voto.model';

@Injectable({
  providedIn: 'root'
})
export class VotoService {
  private apiUrl = `${environment.apiUrl}/votos`;

  constructor(private http: HttpClient) {}

  create(voto: VotoRequestDTO): Observable<VotoResponseDTO> {
    return this.http.post<VotoResponseDTO>(this.apiUrl, voto);
  }

  getAll(pautaId?: number): Observable<VotoResponseDTO[]> {
    const url = pautaId ? `${this.apiUrl}?pautaId=${pautaId}` : this.apiUrl;
    return this.http.get<VotoResponseDTO[]>(url);
  }

  getById(id: number): Observable<VotoResponseDTO> {
    return this.http.get<VotoResponseDTO>(`${this.apiUrl}/${id}`);
  }

  update(id: number, voto: VotoRequestDTO): Observable<VotoResponseDTO> {
    return this.http.put<VotoResponseDTO>(`${this.apiUrl}/${id}`, voto);
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }

  getResultado(pautaId: number): Observable<ResultadoResponseDTO> {
    return this.http.get<ResultadoResponseDTO>(`${this.apiUrl}/resultado/${pautaId}`);
  }

  getSessoesAbertasNaoVotadas(cpf: string): Observable<SessaoAbertaDTO[]> {
    return this.http.get<SessaoAbertaDTO[]>(`${this.apiUrl}/sessoes-abertas?cpf=${cpf}`);
  }
}



==================================================
Arquivo: app\shared\components\header\header.component.html
==================================================

<header class="header">
  <div class="header-content container-dark">
    <div class="logo-title">
      <img src="assets/logo-dbserver.png" alt="DbServer Logo" class="logo" />
      <h1>Sistema de Votação Online - DbServer</h1>
    </div>
    <nav>
      <a routerLink="/dashboard" routerLinkActive="active" class="nav-link">Dashboard</a>
      <a routerLink="/pautas" routerLinkActive="active" class="nav-link">Pautas</a>
      <a routerLink="/sessoes" routerLinkActive="active" class="nav-link">Sessões</a>
      <a routerLink="/votos" routerLinkActive="active" class="nav-link">Votos</a>
    </nav>
  </div>
</header>



==================================================
Arquivo: app\shared\components\header\header.component.scss
==================================================

.header {
  background: var(--header-color);
  padding: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--border-color);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.logo-title {
  display: flex;
  align-items: center;
  gap: 10px;
}

.logo {
  height: 40px;
}

.header h1 {
  font-size: 24px;
  color: var(--text-light);
}

.nav {
  display: flex;
  gap: 20px;
}

.nav a {
  color: var(--link-color);
  text-decoration: none;
  font-size: 16px;
}

.nav a:hover {
  text-decoration: underline;
}



==================================================
Arquivo: app\shared\components\header\header.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\components\header\header.component.ts
==================================================

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, RouterLinkActive } from '@angular/router';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule, RouterLink, RouterLinkActive],
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent {}



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.html
==================================================

<div class="sidebar">
  <ul class="nav flex-column">
    <li class="nav-item">
      <a class="nav-link" routerLink="/dashboard" routerLinkActive="active">
        <i class="bi bi-grid-fill me-2"></i> Dashboard
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" routerLink="/pautas" routerLinkActive="active">
        <i class="bi bi-file-text-fill me-2"></i> Pautas
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" routerLink="/sessoes" routerLinkActive="active">
        <i class="bi bi-calendar-event-fill me-2"></i> Sessões
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" routerLink="/votos" routerLinkActive="active">
        <i class="bi bi-check-square-fill me-2"></i> Votos
      </a>
    </li>
  </ul>
</div>



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.scss
==================================================

.sidebar {
  width: 250px;
  background: var(--sidebar-color);
  padding: 20px;
  height: calc(100vh - 60px);
  border-right: 1px solid var(--border-color);
}

.sidebar ul {
  list-style: none;
}

.sidebar li {
  margin-bottom: 15px;
}

.sidebar a {
  color: var(--link-color);
  text-decoration: none;
  font-size: 16px;
}

.sidebar a:hover {
  text-decoration: underline;
}



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SidebarComponent } from './sidebar.component';

describe('SidebarComponent', () => {
  let component: SidebarComponent;
  let fixture: ComponentFixture<SidebarComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SidebarComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SidebarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.ts
==================================================

import { Component } from '@angular/core';
import {CommonModule} from '@angular/common';
import {RouterLink, RouterLinkActive} from '@angular/router';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  imports: [CommonModule, RouterLink, RouterLinkActive],
  templateUrl: './sidebar.component.html',
  styleUrl: './sidebar.component.scss'
})
export class SidebarComponent {

}



==================================================
Arquivo: app\shared\components\timer\timer.component.html
==================================================

<span [ngClass]="timerClass">{{ tempoRestante }}</span>



==================================================
Arquivo: app\shared\components\timer\timer.component.scss
==================================================

.green {
  color: #28a745;
  font-weight: bold;
}

.yellow {
  color: #ffc107;
  font-weight: bold;
}

.red {
  color: #dc3545;
  font-weight: bold;
}

.expired {
  color: var(--error-color);
  font-weight: bold;
}



==================================================
Arquivo: app\shared\components\timer\timer.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TimerComponent } from './timer.component';

describe('TimerComponent', () => {
  let component: TimerComponent;
  let fixture: ComponentFixture<TimerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TimerComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TimerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\components\timer\timer.component.ts
==================================================

import { Component, Input, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { interval, Subscription } from 'rxjs';

@Component({
  selector: 'app-timer',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './timer.component.html',
  styleUrls: ['./timer.component.scss']
})
export class TimerComponent implements OnInit, OnDestroy {
  @Input() dataFechamento!: string;
  tempoRestante: string = '';
  timerClass: string = '';
  private subscription!: Subscription;

  ngOnInit(): void {
    this.updateTimer();
    this.subscription = interval(1000).subscribe(() => this.updateTimer());
  }

  ngOnDestroy(): void {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  private updateTimer(): void {
    const now = new Date();
    const fechamento = new Date(this.dataFechamento);
    const diffMs = fechamento.getTime() - now.getTime();

    if (diffMs <= 0) {
      this.tempoRestante = 'Sessão encerrada';
      this.timerClass = 'expired';
      return;
    }

    const minutes = Math.floor(diffMs / 1000 / 60);
    const seconds = Math.floor((diffMs / 1000) % 60);
    this.tempoRestante = `${minutes}m ${seconds}s`;

    if (minutes > 10) {
      this.timerClass = 'green';
    } else if (minutes >= 5) {
      this.timerClass = 'yellow';
    } else {
      this.timerClass = 'red';
    }
  }
}



==================================================
Arquivo: app\shared\dynamic-crud\dynamic-crud.component.html
==================================================

<div class="dynamic-crud-container">
  <h2>{{ config?.title }}</h2>

  <div *ngIf="notification" class="notification">{{ notification }}</div>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <button *ngIf="!showForm" (click)="toggleForm()" class="toggle-form-btn">Adicionar Novo</button>

  <form *ngIf="showForm" [formGroup]="form" (ngSubmit)="onSubmit()" class="crud-form">
    <div *ngFor="let field of config?.fields" class="form-field">
      <label for="{{ field.name }}">{{ field.label }}</label>

      <input
        *ngIf="field.type === 'input' && field.dataType !== 'number'"
        [formControlName]="field.name"
        [id]="field.name"
        [type]="field.dataType"
        [placeholder]="field.label"
        [mask]="field.mask || ''"
        [disabled]="field.disabled"
      />

      <input
        *ngIf="field.type === 'input' && field.dataType === 'number'"
        [formControlName]="field.name"
        [id]="field.name"
        type="number"
        [placeholder]="field.label"
        [disabled]="field.disabled"
      />

      <textarea
        *ngIf="field.type === 'textarea'"
        [formControlName]="field.name"
        [id]="field.name"
        [placeholder]="field.label"
        [disabled]="field.disabled"
      ></textarea>

      <select
        *ngIf="field.type === 'dropdown'"
        [formControlName]="field.name"
        [id]="field.name"
        [disabled]="field.disabled"
      >
        <option *ngFor="let option of field.options" [value]="option">{{ option }}</option>
      </select>

      <input
        *ngIf="field.type === 'date'"
        [formControlName]="field.name"
        [id]="field.name"
        type="date"
        [disabled]="field.disabled"
      />

      <div class="error" *ngIf="form.get(field.name)?.invalid && form.get(field.name)?.touched">
        <span *ngIf="form.get(field.name)?.errors?.['required']">{{ field.label }} é obrigatório</span>
        <span *ngIf="form.get(field.name)?.errors?.['pattern']">Formato inválido</span>
        <span *ngIf="form.get(field.name)?.errors?.['invalidCpf']">CPF inválido</span>
        <span *ngIf="form.get(field.name)?.errors?.['min']">{{ field.label }} deve ser maior que {{ field.minValue }}</span>
        <span *ngIf="form.get(field.name)?.errors?.['maxLength']">
          {{ field.label }} deve ter no máximo {{ field.maxLength }} caracteres
        </span>
      </div>
    </div>

    <div class="form-actions">
      <button type="submit" [disabled]="form.invalid" class="btn-primary">Salvar</button>
      <button type="button" (click)="resetForm()" class="btn-danger">Cancelar</button>
    </div>
  </form>

  <div *ngIf="hasFilterableFields" class="filters">
    <div *ngFor="let field of config?.fields" class="filter-field">
      <input
        *ngIf="field.filterable"
        [placeholder]="'Filtrar por ' + field.label"
        (input)="updateFilter(field.name, $event)"
      />
    </div>
  </div>

  <table *ngIf="config && filteredData.length && !isLoading" class="crud-table">
    <thead>
    <tr>
      <th *ngFor="let field of config.fields" [hidden]="!field.showInTable">{{ field.label }}</th>
      <th *ngIf="config.actions.view || config.actions.edit || config.actions.delete">Ações</th>
    </tr>
    </thead>
    <tbody>
    <tr *ngFor="let item of filteredData">
      <td *ngFor="let field of config.fields" [hidden]="!field.showInTable">
        {{ getFieldValue(item, field.name) }}
      </td>
      <td *ngIf="config.actions.view || config.actions.edit || config.actions.delete">
        <button *ngIf="config.actions.view" (click)="viewItem(item)" class="btn-primary">Visualizar</button>
        <button *ngIf="config.actions.edit && hasId(item)" (click)="editItem(item)" class="btn-primary">Editar</button>
        <button *ngIf="config.actions.delete && hasId(item)" (click)="deleteItem(item.id)" class="btn-danger">Excluir</button>
      </td>
    </tr>
    </tbody>
  </table>

  <div *ngIf="!filteredData.length && !isLoading" class="no-data">Nenhum dado encontrado</div>
</div>



==================================================
Arquivo: app\shared\dynamic-crud\dynamic-crud.component.scss
==================================================

@use 'sass:color';

$primary-blue: #007acc; // Mantido para color.adjust

.dynamic-crud-container {
  background: var(--background-dark);
  color: var(--text-light);
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

h2 {
  margin-bottom: 20px;
  font-size: 24px;
  color: var(--text-light);
}

.notification {
  background: #28a745;
  color: var(--text-light);
  padding: 10px;
  margin-bottom: 15px;
  border-radius: 4px;
  text-align: center;
}

.error-message {
  color: var(--error-color);
  font-size: 12px;
  margin-bottom: 15px;
}

.loading {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

.toggle-form-btn {
  background-color: var(--primary-blue);
  color: var(--text-light);
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 15px;
}

.toggle-form-btn:hover {
  background-color: color.adjust($primary-blue, $lightness: -10%);
}

.crud-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-bottom: 20px;
  padding: 15px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background: var(--input-bg);
}

.form-field {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.form-field label {
  font-weight: bold;
  color: var(--text-light);
}

.form-field input,
.form-field textarea,
.form-field select {
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  font-size: 14px;
  background: var(--input-bg);
  color: var(--text-light);
}

.form-field input:focus,
.form-field textarea:focus,
.form-field select:focus {
  border-color: var(--primary-blue);
  box-shadow: 0 0 0 0.25rem rgba(0, 122, 204, 0.25);
}

.form-field input:disabled,
.form-field textarea:disabled,
.form-field select:disabled {
  background-color: #f5f5f5;
}

.form-field .error {
  color: var(--error-color);
  font-size: 12px;
}

.form-actions {
  display: flex;
  gap: 10px;
}

.filters {
  display: flex;
  gap: 15px;
  margin-bottom: 20px;
}

.filter-field input {
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  font-size: 14px;
  background: var(--input-bg);
  color: var(--text-light);
}

.crud-table {
  width: 100%;
  border-collapse: collapse;
  background: var(--input-bg);
}

.crud-table th,
.crud-table td {
  padding: 10px;
  border: 1px solid var(--border-color);
  text-align: left;
  color: var(--text-light);
}

.crud-table th {
  background-color: var(--header-color);
  font-weight: bold;
}

.crud-table button {
  margin-right: 5px;
}

.no-data {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}



==================================================
Arquivo: app\shared\dynamic-crud\dynamic-crud.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DynamicCrudComponent } from './dynamic-crud.component';

describe('DynamicCrudComponent', () => {
  let component: DynamicCrudComponent;
  let fixture: ComponentFixture<DynamicCrudComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DynamicCrudComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DynamicCrudComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\dynamic-crud\dynamic-crud.component.ts
==================================================

import { Component, EventEmitter, Input, Output, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators, AbstractControl, ValidatorFn } from '@angular/forms';
import { NgxMaskDirective } from 'ngx-mask';
import { NotificationService } from '../services/notification.service';

export interface FieldConfig {
  name: string;
  label: string;
  type: 'input' | 'textarea' | 'dropdown' | 'date' | 'datetime-local' | 'checkbox' | 'radio' | 'switch';
  dataType: 'string' | 'number' | 'date';
  required?: boolean;
  maxLength?: number;
  minValue?: number;
  pattern?: RegExp;
  mask?: string;
  options?: string[];
  showInTable?: boolean;
  filterable?: boolean;
  disabled: boolean;
  defaultValue?: any;
}

export interface DynamicTableConfig {
  title: string;
  fields: FieldConfig[];
  actions: {
    view: boolean;
    edit: boolean;
    delete: boolean;
  };
}

export function cpfValidator(): ValidatorFn {
  return (control: AbstractControl): { [key: string]: any } | null => {
    const cpf = control.value?.replace(/[^\d]/g, '');
    if (!cpf || cpf.length !== 11) return { invalidCpf: true };

    let sum = 0;
    let remainder;
    for (let i = 1; i <= 9; i++) {
      sum += parseInt(cpf.substring(i - 1, i)) * (11 - i);
    }
    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cpf.substring(9, 10))) return { invalidCpf: true };

    sum = 0;
    for (let i = 1; i <= 10; i++) {
      sum += parseInt(cpf.substring(i - 1, i)) * (12 - i);
    }
    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cpf.substring(10, 11))) return { invalidCpf: true };

    return null;
  };
}

@Component({
  selector: 'app-dynamic-crud',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, NgxMaskDirective],
  templateUrl: './dynamic-crud.component.html',
  styleUrls: ['./dynamic-crud.component.scss']
})
export class DynamicCrudComponent<T extends Record<string, any>> implements OnInit {
  @Input() config: DynamicTableConfig | null = null;
  @Input() initialData: T[] = [];
  @Input() isLoading = false;
  @Input() error: string | null = null;
  @Output() onCreate = new EventEmitter<T>();
  @Output() onUpdate = new EventEmitter<{ id: number, data: T }>();
  @Output() onRemove = new EventEmitter<number>();
  @Output() onLoadData = new EventEmitter<void>();
  @Output() onView = new EventEmitter<T>();
  @Output() onError = new EventEmitter<string>();

  form: FormGroup;
  isEditMode = false;
  currentEditId: number | null = null;
  showForm = false;
  filteredData: T[] = [];
  filterValues: { [key: string]: any } = {};
  notification: string | null = null;
  hasFilterableFields = false;

  constructor(
    private fb: FormBuilder,
    private notificationService: NotificationService
  ) {
    this.form = this.fb.group({});
    this.notificationService.getNotification().subscribe(notification => {
      this.notification = notification;
    });
  }

  ngOnInit(): void {
    if (this.config) {
      this.initForms();
      this.filteredData = [...this.initialData];
      this.hasFilterableFields = this.config.fields.some(f => f.filterable ?? false);
    }
    this.onLoadData.emit();
  }

  private initForms(): void {
    const formGroup: any = {};
    this.config!.fields.forEach(field => {
      const validators = [];
      if (field.required) validators.push(Validators.required);
      if (field.maxLength) validators.push(Validators.maxLength(field.maxLength));
      if (field.pattern) validators.push(Validators.pattern(field.pattern));
      if (field.minValue !== undefined) validators.push(Validators.min(field.minValue));
      if (field.name === 'cpf') validators.push(cpfValidator());
      formGroup[field.name] = [{ value: field.defaultValue || '', disabled: field.disabled }, validators];
    });
    this.form = this.fb.group(formGroup);
  }

  onSubmit(): void {
    if (this.form.invalid) return;

    const formData = this.form.value as T;
    if (this.isEditMode && this.currentEditId !== null) {
      this.onUpdate.emit({ id: this.currentEditId, data: formData });
      this.notificationService.showSuccess('Item atualizado com sucesso!');
    } else {
      this.onCreate.emit(formData);
      this.notificationService.showSuccess('Item criado com sucesso!');
    }
    this.resetForm();
  }

  editItem(item: T): void {
    if (!this.hasId(item)) {
      this.onError.emit('Item sem ID não pode ser editado');
      return;
    }
    this.isEditMode = true;
    this.currentEditId = item['id'];
    this.showForm = true;
    this.form.patchValue(item);
  }

  deleteItem(id: number): void {
    this.onRemove.emit(id);
    this.notificationService.showSuccess('Item excluído com sucesso!');
  }

  viewItem(item: T): void {
    this.onView.emit(item);
  }

  resetForm(): void {
    this.form.reset();
    this.isEditMode = false;
    this.currentEditId = null;
    this.showForm = false;
  }

  applyFilter(): void {
    this.filteredData = this.initialData.filter(item => {
      return Object.keys(this.filterValues).every(key => {
        const value = this.filterValues[key];
        if (!value) return true;
        return String(item[key] ?? '').toLowerCase().includes(String(value).toLowerCase());
      });
    });
  }

  updateFilter(fieldName: string, event: Event): void {
    const value = (event.target as HTMLInputElement).value;
    this.filterValues[fieldName] = value;
    this.applyFilter();
  }

  toggleForm(): void {
    this.showForm = !this.showForm;
    if (!this.showForm) this.resetForm();
  }

  getFieldValue(item: T, fieldName: string): any {
    return item[fieldName] ?? '';
  }

  hasId(item: T): item is T & { id: number } {
    return typeof item['id'] === 'number';
  }
}



==================================================
Arquivo: app\shared\services\notification.service.ts
==================================================

import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class NotificationService {
  private notificationSubject = new BehaviorSubject<string | null>(null);

  getNotification(): Observable<string | null> {
    return this.notificationSubject.asObservable();
  }

  showSuccess(message: string): void {
    this.notificationSubject.next(message);
    setTimeout(() => this.notificationSubject.next(null), 3000);
  }

  showError(message: string): void {
    this.notificationSubject.next(message);
    setTimeout(() => this.notificationSubject.next(null), 3000);
  }
}



==================================================
Arquivo: environments\environment.prod.ts
==================================================

export const environment = {
  production: true,
  apiUrl: 'https://api.seu-dominio.com/api/v1'
};



==================================================
Arquivo: environments\environment.ts
==================================================

export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080/api/v1'
};


==================================================
Resumo:
Total de arquivos processados: 73
Arquivos com erro: 0
Arquivos processados com sucesso: 73
==================================================
