Relatório de arquivos do diretório: C:/Users/Flavio/Desktop/Projeto/desafio-votacao-fullstack/fullstack-front/front/src
Data de geração: 1745630203.8551297
Extensões permitidas: .html, .scss, .ts, .json


==================================================
Arquivo: index.html
==================================================

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Front</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>



==================================================
Arquivo: main.ts
==================================================

import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { provideNgxMask } from 'ngx-mask';
import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideHttpClient()
  ]
}).catch(err => console.error(err));



==================================================
Arquivo: styles.scss
==================================================


:root {
  --background-dark: #1e1e1e;
  --primary-blue: #007acc;
  --text-light: #d4d4d4;
  --input-bg: #252526;
  --border-color: #3c3c3c;
  --error-color: #f48771;
  --header-color: #333333;
  --sidebar-color: #272727;
  --link-color: #3794ff;
  --accent-orange: #d19a66;
}

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: var(--background-dark);
  color: var(--text-light);
}

* {
  box-sizing: border-box;
}

.container-dark {
  background: var(--background-dark);
  color: var(--text-light);
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

h2 {
  font-size: 24px;
  margin-bottom: 20px;
  color: var(--text-light);
}

.error-message {
  color: var(--error-color);
  font-size: 14px;
  margin-bottom: 15px;
}

.loading {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

.btn-primary {
  background-color: var(--primary-blue);
  color: var(--text-light);
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-primary:hover {
  background-color: var(--primary-blue);
}

.btn-danger {
  background-color: var(--error-color);
  color: var(--text-light);
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-danger:hover {
  background-color: --error-color;
}

form {
  display: flex;
  flex-direction: column;
  gap: 15px;
  background: var(--input-bg);
  padding: 20px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.form-group label {
  font-weight: bold;
  color: var(--text-light);
}

.form-group input,
.form-group textarea,
.form-group select {
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background: var(--input-bg);
  color: var(--text-light);
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
  border-color: var(--primary-blue);
  outline: none;
}

.form-group .error {
  color: var(--error-color);
  font-size: 12px;
}

table {
  width: 100%;
  border-collapse: collapse;
  background: var(--input-bg);
  border-radius: 8px;
  overflow: hidden;
}

th, td {
  padding: 12px;
  border: 1px solid var(--border-color);
  text-align: left;
  color: var(--text-light);
}

th {
  background: var(--header-color);
  font-weight: bold;
}

.no-data {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: var(--text-light);
}

@media (max-width: 768px) {
  .container-dark {
    padding: 10px;
  }

  form {
    padding: 15px;
  }

  table th, table td {
    font-size: 12px;
    padding: 8px;
  }
}



==================================================
Arquivo: app\app.component.html
==================================================

<div class="app-container">
  <app-header></app-header>
  <div class="content-wrapper">
    <app-sidebar></app-sidebar>
    <main class="main">
      <router-outlet />
    </main>
  </div>
</div>



==================================================
Arquivo: app\app.component.scss
==================================================

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.content-wrapper {
  display: flex;
  flex: 1;
}

.main {
  flex: 1;
  padding: 20px;
  background: var(--background-dark);
}



==================================================
Arquivo: app\app.component.ts
==================================================

import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { HeaderComponent } from './shared/components/header/header.component';
import { SidebarComponent } from './shared/components/sidebar/sidebar.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, HeaderComponent, SidebarComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  title = 'front';
}



==================================================
Arquivo: app\app.config.ts
==================================================

import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';
import { provideClientHydration } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    provideClientHydration()
  ]
};



==================================================
Arquivo: app\app.routes.ts
==================================================

import { Routes } from '@angular/router';
import { DashboardComponent } from './pages/dashboard/dashboard.component';
import { PautaListComponent } from './pages/pautas/pauta-list/pauta-list.component';
import { PautaFormComponent } from './pages/pautas/pauta-form/pauta-form.component';
import { SessaoListComponent } from './pages/sessoes/sessao-list/sessao-list.component';
import { SessaoFormComponent } from './pages/sessoes/sessao-form/sessao-form.component';
import { VotoFormComponent } from './pages/votos/voto-form/voto-form.component';
import { VotoListComponent } from './pages/votos/voto-list/voto-list.component';
import { NotFoundComponent } from './pages/not-found/not-found.component';

export const routes: Routes = [
  { path: '', component: DashboardComponent },
  { path: 'dashboard', component: DashboardComponent },
  { path: 'pautas', component: PautaListComponent },
  { path: 'pautas/novo', component: PautaFormComponent },
  { path: 'pautas/:id', component: PautaFormComponent },
  { path: 'sessoes', component: SessaoListComponent },
  { path: 'sessoes/novo', component: SessaoFormComponent },
  { path: 'sessoes/:id', component: SessaoFormComponent },
  { path: 'votos', component: VotoListComponent },
  { path: 'votos/novo', component: VotoFormComponent },
  { path: '**', component: NotFoundComponent }
];



==================================================
Arquivo: app\models\Dynamic-table.model.ts
==================================================

export interface DynamicTableConfig {
  title: string;
  fields: FieldConfig[];
  actions: {
    create?: boolean;
    edit?: boolean;
    delete?: boolean;
    view?: boolean;
  };
  filterable?: boolean;
}

export interface FieldConfig {
  name: string;
  label: string;
  type: 'input' | 'textarea' | 'dropdown' | 'date' | 'datetime-local' | 'checkbox' | 'radio' | 'switch';
  dataType: 'string' | 'number' | 'date';
  required?: boolean;
  maxLength?: number;
  minValue?: number;
  pattern?: RegExp;
  mask?: string;
  options?: { value: string; label: string }[];
  showInTable?: boolean;
  filterable?: boolean;
  disabled?: boolean;
  defaultValue?: any;
}



==================================================
Arquivo: app\models\api-error.model.ts
==================================================

export interface ApiError {
  message: string;
  status?: number;
  details?: any;
}



==================================================
Arquivo: app\models\dashboard.model.ts
==================================================

export interface DashboardResumoDTO {
  totalPautas: number;
  totalSessoesAbertas: number;
  totalSessoesEncerradas: number;
  totalVotos: number;
  percentualVotosSim: number;
  percentualVotosNao: number;
  pautasRecentes: PautaResumoDTO[];
  sessoesAtivas: SessaoResumoDTO[];
}

export interface PautaResumoDTO {
  id: number;
  titulo: string;
  totalVotos: number;
}

export interface SessaoResumoDTO {
  id: number;
  pautaId: number;
  pautaTitulo: string;
  tempoRestante: string;
}

export interface ParticipacaoSessaoDTO {
  sessaoId: number;
  pautaId: number;
  pautaTitulo: string;
  totalVotos: number;
  percentualParticipacao: number;
}

export interface TendenciaVotosDTO {
  periodo: string;
  votosSim: number;
  votosNao: number;
}



==================================================
Arquivo: app\models\pauta.model.ts
==================================================

export interface PautaRequestDTO {
  titulo: string;
  descricao: string;
}

export interface PautaResponseDTO {
  id: number;
  titulo: string;
  descricao: string;
}



==================================================
Arquivo: app\models\sessao-votacao.model.ts
==================================================

export interface SessaoVotacaoRequestDTO {
  pautaId: number;
  dataAbertura?: string;
  dataFechamento?: string;
}

export interface SessaoVotacaoResponseDTO {
  id: number;
  pautaId: number;
  dataAbertura: string;
  dataFechamento: string;
}

export interface SessaoAberta {
  id: number;
  pautaId: number;
  pautaTitulo: string;
  dataInicio: string;
  dataFim: string;
}



==================================================
Arquivo: app\models\voto.model.ts
==================================================

export interface VotoRequestDTO {
  pautaId: number;
  cpf: string;
  voto: 'SIM' | 'NAO';
}

export interface VotoResponseDTO {
  id: number;
  pautaId: number;
  cpf: string;
  voto: 'SIM' | 'NAO';
}

export interface ResultadoResponseDTO {
  pautaId: number;
  titulo: string;
  votosSim: number;
  votosNao: number;
}

export interface SessaoAbertaDTO {
  id: number;
  pautaId: number;
  pautaTitulo: string;
  dataAbertura: string;
  dataFechamento: string;
  tempoRestante: string;
}



==================================================
Arquivo: app\pages\dashboard\dashboard.component.html
==================================================

<div class="dashboard-container">
  <h2>Dashboard</h2>

  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <!-- Seção de Resumo -->
  <div class="resumo-section" *ngIf="!isLoading">
    <div class="card">
      <h3>Total de Pautas</h3>
      <p>{{ resumo.totalPautas }}</p>
    </div>
    <div class="card">
      <h3>Sessões Abertas</h3>
      <p>{{ resumo.totalSessoesAbertas }}</p>
    </div>
    <div class="card">
      <h3>Sessões Encerradas</h3>
      <p>{{ resumo.totalSessoesEncerradas }}</p>
    </div>
    <div class="card">
      <h3>Total de Votos</h3>
      <p>{{ resumo.totalVotos }}</p>
    </div>
    <div class="card">
      <h3>% Votos Sim</h3>
      <p>{{ resumo.percentualVotosSim | number:'1.1-1' }}%</p>
    </div>
    <div class="card">
      <h3>% Votos Não</h3>
      <p>{{ resumo.percentualVotosNao | number:'1.1-1' }}%</p>
    </div>
  </div>

  <!-- Filtro de Tendência de Votos -->
  <div class="section filter-section" *ngIf="!isLoading">
    <h3>Filtro de Tendência de Votos</h3>
    <form class="filter-form" (ngSubmit)="filtrarTendencia()">
      <div class="form-group">
        <label for="periodo">Período:</label>
        <select
          id="periodo"
          [(ngModel)]="filtroPeriodo"
          name="periodo"
          (change)="filtrarTendencia()"
        >
          <option value="DIA">Dia</option>
          <option value="SEMANA">Semana</option>
          <option value="MES">Mês</option>
        </select>
      </div>
    </form>
  </div>

  <!-- Gráfico de Tendência de Votos -->
  <div class="section chart-section" *ngIf="!isLoading && tendenciaVotos.length">
    <h3>Tendência de Votos</h3>
    <div class="chart-container">
      <canvas
        baseChart
        [data]="lineChartData"
        [options]="lineChartOptions"
        [type]="lineChartType"
      ></canvas>
    </div>
  </div>
  <div class="no-data" *ngIf="!isLoading && !tendenciaVotos.length">
    Nenhuma tendência de votos encontrada
  </div>

  <!-- Tabela de Participação em Sessões -->
  <div class="section" *ngIf="!isLoading && participacaoSessoes.length">
    <h3>Participação em Sessões</h3>
    <table class="dashboard-table">
      <thead>
      <tr>
        <th>ID da Sessão</th>
        <th>ID da Pauta</th>
        <th>Título da Pauta</th>
        <th>Total de Votos</th>
        <th>Percentual de Participação</th>
      </tr>
      </thead>
      <tbody>
      <tr *ngFor="let sessao of participacaoSessoes">
        <td>{{ sessao.sessaoId }}</td>
        <td>{{ sessao.pautaId }}</td>
        <td>{{ sessao.pautaTitulo }}</td>
        <td>{{ sessao.totalVotos }}</td>
        <td>{{ sessao.percentualParticipacao | number:'1.1-1' }}%</td>
      </tr>
      </tbody>
    </table>
  </div>
  <div class="no-data" *ngIf="!isLoading && !participacaoSessoes.length">
    Nenhuma sessão encontrada
  </div>
</div>



==================================================
Arquivo: app\pages\dashboard\dashboard.component.scss
==================================================

@use 'sass:color';

$primary-blue: #007acc;
$background-dark: #1e1e1e;
$text-light: #ffffff;
$input-bg: #2d2d2d;
$border-color: #444;
$header-color: #333;
$error-color: #ff4444;

.dashboard-container {
  background: $background-dark;
  color: $text-light;
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
  min-height: 100vh;
}

h2 {
  margin-bottom: 20px;
  font-size: 24px;
  color: $text-light;
}

.error-message {
  color: $error-color;
  font-size: 14px;
  margin-bottom: 15px;
  text-align: center;
}

.loading {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: $text-light;
}

.resumo-section {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.card {
  padding: 15px;
  background: $input-bg;
  border: 1px solid $border-color;
  border-radius: 8px;
  text-align: center;
}

.card h3 {
  margin-bottom: 10px;
  font-size: 16px;
  color: $text-light;
}

.card p {
  font-size: 22px;
  color: $primary-blue;
}

.section {
  margin-bottom: 40px;
}

.section h3 {
  margin-bottom: 15px;
  font-size: 20px;
  color: $text-light;
}

.filter-section {
  background: $input-bg;
  padding: 20px;
  border-radius: 8px;
  border: 1px solid $border-color;
}

.filter-form {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  align-items: flex-end;
}

.form-group {
  display: flex;
  flex-direction: column;
  min-width: 150px;
}

.form-group label {
  font-size: 14px;
  margin-bottom: 5px;
  color: $text-light;
}

.form-group select {
  padding: 8px;
  border: 1px solid $border-color;
  border-radius: 4px;
  background: #3a3a3a;
  color: $text-light;
  font-size: 14px;
}

.chart-section {
  background: $input-bg;
  padding: 20px;
  border-radius: 8px;
  border: 1px solid $border-color;
}

.chart-container {
  position: relative;
  height: 300px;
  max-width: 100%;
}

.dashboard-table {
  width: 100%;
  border-collapse: collapse;
  background: $input-bg;
  border-radius: 8px;
  overflow: hidden;
}

.dashboard-table th,
.dashboard-table td {
  padding: 12px;
  border: 1px solid $border-color;
  text-align: left;
  color: $text-light;
  font-size: 14px;
}

.dashboard-table th {
  background-color: $header-color;
  font-weight: bold;
}

.no-data {
  text-align: center;
  font-size: 16px;
  margin: 20px 0;
  color: $text-light;
}

@media (max-width: 768px) {
  .resumo-section {
    grid-template-columns: 1fr;
    gap: 15px; // Ajuste para melhorar o espaçamento em telas menores
  }

  .filter-form {
    flex-direction: column;
    align-items: stretch;
    gap: 10px; // Adicionado para melhorar o espaçamento entre os elementos
  }

  .form-group {
    min-width: 100%;
  }

  .dashboard-table th,
  .dashboard-table td {
    font-size: 12px;
    padding: 8px;
    word-wrap: break-word; // Adicionado para evitar que textos longos quebrem o layout
  }
}

@media (max-width: 480px) {
  .dashboard-container {
    padding: 10px; // Reduzido para melhorar o layout em telas muito pequenas
  }

  .card p {
    font-size: 18px; // Reduzido para evitar que o texto fique muito grande
  }

  .dashboard-table th,
  .dashboard-table td {
    font-size: 10px; // Ajustado para telas muito pequenas
    padding: 6px;
  }
}



==================================================
Arquivo: app\pages\dashboard\dashboard.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardComponent } from './dashboard.component';

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DashboardComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\dashboard\dashboard.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgChartsModule } from 'ng2-charts';
import { DashboardService } from '../../services/dashboard.service';
import { DashboardResumoDTO, ParticipacaoSessaoDTO, TendenciaVotosDTO } from '../../models/dashboard.model';
import { ApiError } from '../../models/api-error.model';
import { ChartConfiguration, ChartOptions } from 'chart.js';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule, FormsModule, NgChartsModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  resumo: DashboardResumoDTO = {
    totalPautas: 0,
    totalSessoesAbertas: 0,
    totalSessoesEncerradas: 0,
    totalVotos: 0,
    percentualVotosSim: 0,
    percentualVotosNao: 0,
    pautasRecentes: [],
    sessoesAtivas: []
  };
  participacaoSessoes: ParticipacaoSessaoDTO[] = [];
  tendenciaVotos: TendenciaVotosDTO[] = [];
  isLoading = false;
  error: string | null = null;
  private pendingRequests = 0;

  // Filtro de período
  filtroPeriodo: string = 'SEMANA'; // Padrão: Semana

  // Configuração do gráfico de tendência
  public lineChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        data: [],
        label: 'Votos Sim',
        borderColor: '#007acc',
        backgroundColor: 'rgba(0, 122, 204, 0.2)',
        fill: true
      },
      {
        data: [],
        label: 'Votos Não',
        borderColor: '#ff4444',
        backgroundColor: 'rgba(255, 68, 68, 0.2)',
        fill: true
      }
    ],
    labels: []
  };

  public lineChartOptions: ChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { display: true },
      title: { display: true, text: 'Tendência de Votos' }
    },
    scales: {
      y: { beginAtZero: true }
    }
  };

  public lineChartType: 'line' = 'line';

  constructor(private dashboardService: DashboardService) {}

  ngOnInit(): void {
    this.loadDashboardData();
  }

  private trackLoadingStart(): void {
    this.pendingRequests++;
    this.isLoading = true;
  }

  private trackLoadingComplete(): void {
    this.pendingRequests--;
    if (this.pendingRequests === 0) {
      this.isLoading = false;
    }
  }

  loadDashboardData(): void {
    this.error = null;

    this.trackLoadingStart();
    this.dashboardService.getResumo().subscribe({
      next: (resumo: DashboardResumoDTO) => { this.resumo = resumo; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar resumo'; },
      complete: () => { this.trackLoadingComplete(); }
    });

    this.trackLoadingStart();
    this.dashboardService.getParticipacaoSessoes().subscribe({
      next: (participacao: ParticipacaoSessaoDTO[]) => { this.participacaoSessoes = participacao; },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar participação em sessões'; },
      complete: () => { this.trackLoadingComplete(); }
    });

    this.loadTendenciaVotos();
  }

  loadTendenciaVotos(): void {
    const { inicio, fim } = this.calcularDatas();
    const granularidade = this.filtroPeriodo;

    this.trackLoadingStart();
    this.dashboardService.getTendenciaVotos(inicio, fim, granularidade).subscribe({
      next: (tendencia: TendenciaVotosDTO[]) => {
        this.tendenciaVotos = tendencia;
        this.updateChartData();
      },
      error: (err: ApiError) => { this.error = err.message || 'Erro ao carregar tendência de votos'; },
      complete: () => { this.trackLoadingComplete(); }
    });
  }

  calcularDatas(): { inicio: string; fim: string } {
    const hoje = new Date();
    const fim = this.formatarData(hoje);
    let inicio: string;

    switch (this.filtroPeriodo) {
      case 'DIA':
        inicio = fim;
        break;
      case 'SEMANA':
        const umaSemanaAtras = new Date(hoje);
        umaSemanaAtras.setDate(hoje.getDate() - 7);
        inicio = this.formatarData(umaSemanaAtras);
        break;
      case 'MES':
        const umMesAtras = new Date(hoje);
        umMesAtras.setDate(hoje.getDate() - 30);
        inicio = this.formatarData(umMesAtras);
        break;
      default:
        inicio = fim;
    }

    return { inicio, fim };
  }

  formatarData(data: Date): string {
    const ano = data.getFullYear();
    const mes = String(data.getMonth() + 1).padStart(2, '0');
    const dia = String(data.getDate()).padStart(2, '0');
    return `${ano}-${mes}-${dia}`;
  }

  updateChartData(): void {
    this.lineChartData = {
      datasets: [
        {
          data: this.tendenciaVotos.map(t => t.votosSim),
          label: 'Votos Sim',
          borderColor: '#007acc',
          backgroundColor: 'rgba(0, 122, 204, 0.2)',
          fill: true
        },
        {
          data: this.tendenciaVotos.map(t => t.votosNao),
          label: 'Votos Não',
          borderColor: '#ff4444',
          backgroundColor: 'rgba(255, 68, 68, 0.2)',
          fill: true
        }
      ],
      labels: this.tendenciaVotos.map(t => t.periodo)
    };
  }

  filtrarTendencia(): void {
    this.loadTendenciaVotos();
  }
}



==================================================
Arquivo: app\pages\not-found\not-found.component.html
==================================================

<div class="not-found container-dark">
  <h2>Página Não Encontrada</h2>
  <p>A página que você está procurando não existe.</p>
  <a routerLink="/dashboard" class="btn-primary">Voltar para o Dashboard</a>
</div>



==================================================
Arquivo: app\pages\not-found\not-found.component.scss
==================================================

.not-found {
  text-align: center;
  padding: 40px;
}

h2 {
  font-size: 24px;
  margin-bottom: 20px;
}

p {
  font-size: 16px;
  margin-bottom: 20px;
}



==================================================
Arquivo: app\pages\not-found\not-found.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NotFoundComponent } from './not-found.component';

describe('NotFoundComponent', () => {
  let component: NotFoundComponent;
  let fixture: ComponentFixture<NotFoundComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [NotFoundComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(NotFoundComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\not-found\not-found.component.ts
==================================================

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-not-found',
  standalone: true,
  imports: [CommonModule, RouterLink],
  templateUrl: './not-found.component.html',
  styleUrl: './not-found.component.scss'
})
export class NotFoundComponent {}



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.html
==================================================

<div class="container-dark">
  <h2>{{ isEditMode ? 'Editar Pauta' : 'Nova Pauta' }}</h2>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <form [formGroup]="pautaForm" (ngSubmit)="savePauta()">
    <div class="form-group">
      <label for="titulo">Título</label>
      <input
        id="titulo"
        formControlName="titulo"
        type="text"
        placeholder="Digite o título"
      />
      <div class="error" *ngIf="pautaForm.get('titulo')?.invalid && pautaForm.get('titulo')?.touched">
        <span *ngIf="pautaForm.get('titulo')?.errors?.['required']">Título é obrigatório</span>
        <span *ngIf="pautaForm.get('titulo')?.errors?.['maxlength']">Máximo 100 caracteres</span>
      </div>
    </div>

    <div class="form-group">
      <label for="descricao">Descrição</label>
      <textarea
        id="descricao"
        formControlName="descricao"
        placeholder="Digite a descrição"
      ></textarea>
      <div class="error" *ngIf="pautaForm.get('descricao')?.invalid && pautaForm.get('descricao')?.touched">
        <span *ngIf="pautaForm.get('descricao')?.errors?.['required']">Descrição é obrigatória</span>
        <span *ngIf="pautaForm.get('descricao')?.errors?.['maxlength']">Máximo 500 caracteres</span>
      </div>
    </div>

    <div class="form-group">
      <button type="submit" class="btn-primary" [disabled]="pautaForm.invalid || isLoading">Salvar</button>
      <button type="button" class="btn-danger" (click)="cancel()">Cancelar</button>
    </div>
  </form>
</div>



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.scss
==================================================

.container-dark {
  max-width: 600px;
}



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PautaFormComponent } from './pauta-form.component';

describe('PautaFormComponent', () => {
  let component: PautaFormComponent;
  let fixture: ComponentFixture<PautaFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PautaFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(PautaFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\pautas\pauta-form\pauta-form.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { PautaService } from '../../../services/pauta.service';
import { PautaRequestDTO, PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-pauta-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './pauta-form.component.html',
  styleUrls: ['./pauta-form.component.scss']
})
export class PautaFormComponent implements OnInit {
  pautaForm!: ReturnType<FormBuilder['group']>;
  isLoading = false;
  error: string | null = null;
  isEditMode = false;
  pautaId: number | null = null;

  constructor(
    private fb: FormBuilder,
    private pautaService: PautaService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
  this.pautaForm = this.fb.group({
    titulo: ['', [Validators.required, Validators.maxLength(100)]],
    descricao: ['', [Validators.required, Validators.maxLength(500)]]
  });

  const id = this.route.snapshot.paramMap.get('id');
  if (id) {
    this.isEditMode = true;
    this.pautaId = +id;
    this.loadPauta(this.pautaId);
  }
  }

  loadPauta(id: number): void {
    this.isLoading = true;
    this.pautaService.getById(id).subscribe({
      next: (pauta: PautaResponseDTO) => {
        this.pautaForm.patchValue(pauta);
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pauta';
        this.isLoading = false;
      }
    });
  }

  savePauta(): void {
    if (this.pautaForm.invalid) return;
    this.isLoading = true;
    const pautaData: PautaRequestDTO = this.pautaForm.value as PautaRequestDTO;

    const action = this.isEditMode && this.pautaId
      ? this.pautaService.update(this.pautaId, pautaData)
      : this.pautaService.create(pautaData);

    action.subscribe({
      next: () => {
        this.isLoading = false;
        this.router.navigate(['/pautas']);
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao salvar pauta';
        this.isLoading = false;
      }
    });
  }

  cancel(): void {
    this.router.navigate(['/pautas']);
  }
}



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.html
==================================================

<div class="container-dark">
  <h2>Lista de Pautas</h2>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <button class="btn-primary" routerLink="/pautas/novo">Nova Pauta</button>

  <table *ngIf="pautas.length && !isLoading">
    <thead>
      <tr>
        <th>Título</th>
        <th>Descrição</th>
        <th>Ações</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let pauta of pautas">
        <td>{{ pauta.titulo }}</td>
        <td>{{ pauta.descricao }}</td>
        <td>
          <button class="btn-primary" [routerLink]="['/pautas', pauta.id]">Editar</button>
          <button class="btn-danger" (click)="deletePauta(pauta.id)">Excluir</button>
        </td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!pautas.length && !isLoading" class="no-data">Nenhuma pauta encontrada</div>
</div>



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.scss
==================================================

.container-dark {
  max-width: 1200px;
}

button {
  margin: 5px;
}



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PautaListComponent } from './pauta-list.component';

describe('PautaListComponent', () => {
  let component: PautaListComponent;
  let fixture: ComponentFixture<PautaListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PautaListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(PautaListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\pautas\pauta-list\pauta-list.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { PautaService } from '../../../services/pauta.service';
import { PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-pauta-list',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './pauta-list.component.html',
  styleUrls: ['./pauta-list.component.scss']
})
export class PautaListComponent implements OnInit {
  pautas: PautaResponseDTO[] = [];
  isLoading = false;
  error: string | null = null;

  constructor(private pautaService: PautaService) {}

  ngOnInit(): void {
    this.loadPautas();
  }

  loadPautas(): void {
    this.isLoading = true;
    this.pautaService.getAll().subscribe({
      next: (pautas: PautaResponseDTO[]) => {
        this.pautas = pautas;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pautas';
        this.isLoading = false;
      }
    });
  }

  deletePauta(id: number): void {
    if (confirm('Deseja excluir esta pauta?')) {
      this.isLoading = true;
      this.pautaService.delete(id).subscribe({
        next: () => this.loadPautas(),
        error: (err: ApiError) => {
          this.error = err.message || 'Erro ao deletar pauta';
          this.isLoading = false;
        }
      });
    }
  }
}



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.html
==================================================

<div class="container-dark">
  <h2>{{ isEditMode ? 'Editar Sessão' : 'Nova Sessão' }}</h2>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <form [formGroup]="sessaoForm" (ngSubmit)="saveSessao()">
    <div class="form-group">
      <label for="pautaId">Pauta</label>
      <select id="pautaId" formControlName="pautaId">
        <option value="">Selecione uma pauta</option>
        <option *ngFor="let pauta of pautas" [value]="pauta.id">{{ pauta.titulo }}</option>
      </select>
      <div class="error" *ngIf="sessaoForm.get('pautaId')?.invalid && sessaoForm.get('pautaId')?.touched">
        <span>Pauta é obrigatória</span>
      </div>
    </div>

    <div class="form-group">
      <label for="dataAbertura">Data e Hora de Abertura</label>
      <input
        id="dataAbertura"
        formControlName="dataAbertura"
        type="datetime-local"
      />
      <div class="error" *ngIf="sessaoForm.get('dataAbertura')?.invalid && sessaoForm.get('dataAbertura')?.touched">
        <span>Data de abertura é obrigatória</span>
      </div>
    </div>

    <div class="form-group">
      <label for="duracao">Duração (minutos, opcional)</label>
      <input
        id="duracao"
        formControlName="duracao"
        type="number"
        min="1"
        placeholder="1 (padrão)"
      />
      <div class="error" *ngIf="sessaoForm.get('duracao')?.invalid && sessaoForm.get('duracao')?.touched">
        <span>Duração deve ser maior que 0</span>
      </div>
    </div>

    <div class="form-group">
      <button type="submit" class="btn-primary" [disabled]="sessaoForm.invalid || isLoading">Salvar</button>
      <button type="button" class="btn-danger" (click)="cancel()">Cancelar</button>
    </div>
  </form>
</div>



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.scss
==================================================

.container-dark {
  max-width: 600px;
}

select, input[type="datetime-local"], input[type="number"] {
  width: 100%;
}



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SessaoFormComponent } from './sessao-form.component';

describe('SessaoFormComponent', () => {
  let component: SessaoFormComponent;
  let fixture: ComponentFixture<SessaoFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SessaoFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SessaoFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\sessoes\sessao-form\sessao-form.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { SessaoVotacaoService } from '../../../services/sessao-votacao.service';
import { PautaService } from '../../../services/pauta.service';
import { SessaoVotacaoRequestDTO, SessaoVotacaoResponseDTO } from '../../../models/sessao-votacao.model';
import { PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-sessao-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './sessao-form.component.html',
  styleUrls: ['./sessao-form.component.scss']
})
export class SessaoFormComponent implements OnInit {
  sessaoForm: any;
  pautas: PautaResponseDTO[] = [];
  isLoading = false;
  error: string | null = null;
  isEditMode = false;
  sessaoId: number | null = null;

  constructor(
    private fb: FormBuilder,
    private sessaoService: SessaoVotacaoService,
    private pautaService: PautaService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadPautas();
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.isEditMode = true;
    this.sessaoForm = this.fb.group({
      pautaId: ['', Validators.required],
      dataAbertura: ['', Validators.required],
      duracao: ['']
    });
    this.loadPautas();
      if (this.sessaoId !== null) {
        this.loadSessao(this.sessaoId);
      }
    }
  }

  loadPautas(): void {
    this.isLoading = true;
    this.pautaService.getAll().subscribe({
      next: (pautas: PautaResponseDTO[]) => {
        this.pautas = pautas;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pautas';
        this.isLoading = false;
      }
    });
  }

  loadSessao(id: number): void {
    this.isLoading = true;
    this.sessaoService.getById(id).subscribe({
      next: (sessao: SessaoVotacaoResponseDTO) => {
        this.sessaoForm.patchValue({
          pautaId: sessao.pautaId.toString(),
          dataAbertura: new Date(sessao.dataAbertura).toISOString().slice(0, 16)
        });
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar sessão';
        this.isLoading = false;
      }
    });
  }

  saveSessao(): void {
    if (this.sessaoForm.invalid) return;
    this.isLoading = true;

    const formValue = this.sessaoForm.value;
    const dataAbertura = new Date(formValue.dataAbertura!);
    let dataFechamento: string | undefined;

    if (formValue.duracao) {
      const duracaoMinutos = parseInt(formValue.duracao, 10);
      if (duracaoMinutos > 0) {
        const fechamento = new Date(dataAbertura.getTime() + duracaoMinutos * 60 * 1000);
        dataFechamento = fechamento.toISOString();
      }
    } else {
      // Default: 1 minuto
      const fechamento = new Date(dataAbertura.getTime() + 1 * 60 * 1000);
      dataFechamento = fechamento.toISOString();
    }

    const sessaoData: SessaoVotacaoRequestDTO = {
      pautaId: parseInt(formValue.pautaId!, 10),
      dataAbertura: dataAbertura.toISOString(),
      dataFechamento
    };

    const action = this.isEditMode && this.sessaoId
      ? this.sessaoService.update(this.sessaoId, sessaoData)
      : this.sessaoService.create(sessaoData);

    action.subscribe({
      next: () => {
        this.isLoading = false;
        this.router.navigate(['/sessoes']);
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao salvar sessão';
        this.isLoading = false;
      }
    });
  }

  cancel(): void {
    this.router.navigate(['/sessoes']);
  }
}



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.html
==================================================

<div class="container-dark">
  <h2>Lista de Sessões</h2>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <button class="btn-primary" routerLink="/sessoes/novo">Nova Sessão</button>

  <table *ngIf="sessoes.length && !isLoading">
    <thead>
      <tr>
        <th>Pauta</th>
        <th>Data de Abertura</th>
        <th>Data de Fechamento</th>
        <th>Status</th>
        <th>Ações</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let sessao of sessoes">
        <td>{{ getPautaTitulo(sessao.pautaId) }}</td>
        <td>{{ sessao.dataAbertura | date:'dd/MM/yyyy HH:mm' }}</td>
        <td>{{ sessao.dataFechamento | date:'dd/MM/yyyy HH:mm' }}</td>
        <td>{{ isSessaoAberta(sessao) ? 'Aberta' : 'Encerrada' }}</td>
        <td>
          <button class="btn-primary" [routerLink]="['/sessoes', sessao.id]" *ngIf="isSessaoAberta(sessao)">Editar</button>
          <button class="btn-danger" (click)="deleteSessao(sessao.id)">Excluir</button>
        </td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!sessoes.length && !isLoading" class="no-data">Nenhuma sessão encontrada</div>
</div>



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.scss
==================================================

.container-dark {
  max-width: 1200px;
}

button {
  margin: 5px;
}



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SessaoListComponent } from './sessao-list.component';

describe('SessaoListComponent', () => {
  let component: SessaoListComponent;
  let fixture: ComponentFixture<SessaoListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SessaoListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SessaoListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\sessoes\sessao-list\sessao-list.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { SessaoVotacaoService } from '../../../services/sessao-votacao.service';
import { PautaService } from '../../../services/pauta.service';
import { SessaoVotacaoResponseDTO } from '../../../models/sessao-votacao.model';
import { PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-sessao-list',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './sessao-list.component.html',
  styleUrls: ['./sessao-list.component.scss']
})
export class SessaoListComponent implements OnInit {
  sessoes: SessaoVotacaoResponseDTO[] = [];
  pautas: PautaResponseDTO[] = [];
  isLoading = false;
  error: string | null = null;

  constructor(
    private sessaoService: SessaoVotacaoService,
    private pautaService: PautaService
  ) {}

  ngOnInit(): void {
    this.loadPautas();
    this.loadSessoes();
  }

  loadPautas(): void {
    this.pautaService.getAll().subscribe({
      next: (pautas: PautaResponseDTO[]) => {
        this.pautas = pautas;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pautas';
      }
    });
  }

  loadSessoes(): void {
    this.isLoading = true;
    this.sessaoService.getAll().subscribe({
      next: (sessoes: SessaoVotacaoResponseDTO[]) => {
        this.sessoes = sessoes;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar sessões';
        this.isLoading = false;
      }
    });
  }

  getPautaTitulo(pautaId: number): string {
    const pauta = this.pautas.find(p => p.id === pautaId);
    return pauta ? pauta.titulo : 'Pauta não encontrada';
  }

  isSessaoAberta(sessao: SessaoVotacaoResponseDTO): boolean {
    return new Date(sessao.dataFechamento) > new Date();
  }

  deleteSessao(id: number): void {
    if (confirm('Deseja excluir esta sessão?')) {
      this.isLoading = true;
      this.sessaoService.delete(id).subscribe({
        next: () => this.loadSessoes(),
        error: (err: ApiError) => {
          this.error = err.message || 'Erro ao deletar sessão';
          this.isLoading = false;
        }
      });
    }
  }
}



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.html
==================================================

<div class="container-dark">
  <h2>Votar em Sessão</h2>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <!-- Modal CPF -->
  <div class="modal" *ngIf="showCpfModal">
    <div class="modal-content">
      <h3>Informe seu CPF</h3>
      <input
        type="text"
        [(ngModel)]="cpf"
        placeholder="Digite seu CPF"
        maxlength="11"
      />
      <div class="error" *ngIf="cpfError">{{ cpfError }}</div>
      <button class="btn-primary" (click)="validarCpf()">Validar</button>
    </div>
  </div>

  <!-- Sessões Abertas -->
  <div *ngIf="!showCpfModal && sessoes.length && !isLoading">
    <table>
      <thead>
        <tr>
          <th>Pauta</th>
          <th>Data de Início</th>
          <th>Data de Fim</th>
          <th>Tempo Restante</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let sessao of sessoes" [class.selected]="selectedSessao?.id === sessao.id" (click)="selectSessao(sessao)">
          <td>{{ sessao.pautaTitulo }}</td>
          <td>{{ sessao.dataAbertura | date:'dd/MM/yyyy HH:mm' }}</td>
          <td>{{ sessao.dataFechamento | date:'dd/MM/yyyy HH:mm' }}</td>
          <td>
            <app-timer [dataFechamento]="sessao.dataFechamento"></app-timer>
          </td>
        </tr>
      </tbody>
    </table>

    <div class="votacao-opcoes" *ngIf="selectedSessao">
      <h3>Votar em: {{ selectedSessao.pautaTitulo }}</h3>
      <button class="btn-primary" (click)="votar('SIM')">Sim</button>
      <button class="btn-danger" (click)="votar('NAO')">Não</button>
    </div>
  </div>

  <div *ngIf="!showCpfModal && !sessoes.length && !isLoading" class="no-data">
    Nenhuma sessão aberta para votação
  </div>
</div>



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.scss
==================================================

.container-dark {
  max-width: 1200px;
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: var(--input-bg);
  padding: 20px;
  border-radius: 8px;
  text-align: center;
  color: var(--text-light);
}

.modal-content input {
  padding: 8px;
  margin: 10px 0;
  width: 200px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
}

.modal-content .error {
  color: var(--error-color);
}

table .selected {
  background: var(--accent-orange);
}

.votacao-opcoes {
  margin-top: 20px;
  text-align: center;
}

.votacao-opcoes button {
  margin: 0 10px;
}



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VotoFormComponent } from './voto-form.component';

describe('VotoFormComponent', () => {
  let component: VotoFormComponent;
  let fixture: ComponentFixture<VotoFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [VotoFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(VotoFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\votos\voto-form\voto-form.component.ts
==================================================

import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { VotoService } from '../../../services/voto.service';
import { EleitorService } from '../../../services/eleitor.service';
import { SessaoAbertaDTO } from '../../../models/voto.model';
import { TimerComponent } from '../../../shared/components/timer/timer.component';
import { Subscription } from 'rxjs';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-voto-form',
  standalone: true,
  imports: [CommonModule, FormsModule, TimerComponent],
  templateUrl: './voto-form.component.html',
  styleUrls: ['./voto-form.component.scss']
})
export class VotoFormComponent implements OnInit, OnDestroy {
  cpf = '';
  showCpfModal = true;
  cpfError = '';
  sessoes: SessaoAbertaDTO[] = [];
  selectedSessao: SessaoAbertaDTO | null = null;
  isLoading = false;
  error: string | null = null;
  private subscription: Subscription = new Subscription();

  constructor(
    private votoService: VotoService,
    private eleitorService: EleitorService
  ) {}

  ngOnInit(): void {}

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }

  validarCpf(): void {
    this.isLoading = true;
    this.cpfError = '';
    this.eleitorService.validarCpf(this.cpf).subscribe({
      next: (response) => {
        if (response.status === 'ABLE_TO_VOTE') {
          this.carregarSessoes();
          this.showCpfModal = false;
        } else {
          this.cpfError = 'CPF não autorizado para votar';
          this.isLoading = false;
        }
      },
      error: (err) => {
        this.cpfError = err.status === 404 ? 'CPF inválido' : 'Erro ao validar CPF';
        this.isLoading = false;
      }
    });
  }

  carregarSessoes(): void {
    this.isLoading = true;
    this.votoService.getSessoesAbertasNaoVotadas(this.cpf).subscribe({
      next: (sessoes: SessaoAbertaDTO[]) => {
        this.sessoes = sessoes;
        this.selectedSessao = sessoes.length > 0 ? sessoes[0] : null;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar sessões';
        this.isLoading = false;
      }
    });
  }

  selectSessao(sessao: SessaoAbertaDTO): void {
    this.selectedSessao = sessao;
  }

  votar(voto: 'SIM' | 'NAO'): void {
    if (!this.selectedSessao) return;
    this.isLoading = true;
    const votoRequest = {
      pautaId: this.selectedSessao.pautaId,
      cpf: this.cpf,
      voto
    };
    this.votoService.votar(votoRequest).subscribe({
      next: () => {
        this.sessoes = this.sessoes.filter(s => s.id !== this.selectedSessao!.id);
        this.selectedSessao = this.sessoes.length > 0 ? this.sessoes[0] : null;
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao registrar voto';
        this.isLoading = false;
      }
    });
  }
}



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.html
==================================================

<div class="container-dark">
  <h2>Lista de Votos</h2>
  <div *ngIf="error" class="error-message">{{ error }}</div>
  <div *ngIf="isLoading" class="loading">Carregando...</div>

  <div class="filter">
    <label for="pautaId">Filtrar por Pauta:</label>
    <select id="pautaId" [(ngModel)]="selectedPautaId" (change)="loadVotos()">
      <option value="">Todas as pautas</option>
      <option *ngFor="let pauta of pautas" [value]="pauta.id">{{ pauta.titulo }}</option>
    </select>
  </div>

  <table *ngIf="votos.length && !isLoading">
    <thead>
      <tr>
        <th>Pauta</th>
        <th>CPF</th>
        <th>Voto</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let voto of votos">
        <td>{{ getPautaTitulo(voto.pautaId) }}</td>
        <td>{{ voto.cpf }}</td>
        <td>{{ voto.voto }}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="resultado && selectedPautaId" class="resultado">
    <h3>Resultado da Pauta: {{ getPautaTitulo(+selectedPautaId) }}</h3>
    <p>Votos Sim: {{ resultado.votosSim }}</p>
    <p>Votos Não: {{ resultado.votosNao }}</p>
  </div>

  <div *ngIf="!votos.length && !isLoading" class="no-data">Nenhum voto encontrado</div>
</div>



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.scss
==================================================

.container-dark {
  max-width: 1200px;
}

.filter {
  margin-bottom: 20px;
}

.resultado {
  margin-top: 20px;
  padding: 15px;
  background: var(--input-bg);
  border: 1px solid var(--border-color);
  border-radius: 8px;
}



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VotoListComponent } from './voto-list.component';

describe('VotoListComponent', () => {
  let component: VotoListComponent;
  let fixture: ComponentFixture<VotoListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [VotoListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(VotoListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\pages\votos\voto-list\voto-list.component.ts
==================================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { VotoService } from '../../../services/voto.service';
import { PautaService } from '../../../services/pauta.service';
import { VotoResponseDTO, ResultadoResponseDTO } from '../../../models/voto.model';
import { PautaResponseDTO } from '../../../models/pauta.model';
import { ApiError } from '../../../models/api-error.model';

@Component({
  selector: 'app-voto-list',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './voto-list.component.html',
  styleUrls: ['./voto-list.component.scss']
})
export class VotoListComponent implements OnInit {
  votos: VotoResponseDTO[] = [];
  pautas: PautaResponseDTO[] = [];
  selectedPautaId: string = '';
  resultado: ResultadoResponseDTO | null = null;
  isLoading = false;
  error: string | null = null;

  constructor(
    private votoService: VotoService,
    private pautaService: PautaService
  ) {}

  ngOnInit(): void {
    this.loadPautas();
    this.loadVotos();
  }

  loadPautas(): void {
    this.pautaService.getAll().subscribe({
      next: (pautas: PautaResponseDTO[]) => {
        this.pautas = pautas;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar pautas';
      }
    });
  }

  loadVotos(): void {
    this.isLoading = true;
    const pautaId = this.selectedPautaId ? parseInt(this.selectedPautaId) : undefined;
    this.votoService.getAll(pautaId).subscribe({
      next: (votos: VotoResponseDTO[]) => {
        this.votos = votos;
        this.loadResultado();
        this.isLoading = false;
      },
      error: (err: ApiError) => {
        this.error = err.message || 'Erro ao carregar votos';
        this.isLoading = false;
      }
    });
  }

  loadResultado(): void {
    if (this.selectedPautaId) {
      this.votoService.getResultado(parseInt(this.selectedPautaId)).subscribe({
        next: (resultado: ResultadoResponseDTO) => {
          this.resultado = resultado;
        },
        error: (err: ApiError) => {
          this.error = err.message || 'Erro ao carregar resultado';
        }
      });
    } else {
      this.resultado = null;
    }
  }

  getPautaTitulo(pautaId: number): string {
    const pauta = this.pautas.find(p => p.id === pautaId);
    return pauta ? pauta.titulo : 'Pauta não encontrada';
  }
}



==================================================
Arquivo: app\services\dashboard.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DashboardResumoDTO, ParticipacaoSessaoDTO, TendenciaVotosDTO } from '../models/dashboard.model';

@Injectable({
  providedIn: 'root'
})
export class DashboardService {
  private apiUrl = 'http://localhost:8080/api/v1/dashboard';

  constructor(private http: HttpClient) {}

  getResumo(): Observable<DashboardResumoDTO> {
    return this.http.get<DashboardResumoDTO>(`${this.apiUrl}/resumo`);
  }

  getParticipacaoSessoes(): Observable<ParticipacaoSessaoDTO[]> {
    return this.http.get<ParticipacaoSessaoDTO[]>(`${this.apiUrl}/sessoes/participacao`);
  }

  getTendenciaVotos(inicio?: string, fim?: string, granularidade?: string): Observable<TendenciaVotosDTO[]> {
    let params = new HttpParams();
    if (inicio) params = params.set('inicio', inicio);
    if (fim) params = params.set('fim', fim);
    if (granularidade) params = params.set('granularidade', granularidade);
    return this.http.get<TendenciaVotosDTO[]>(`${this.apiUrl}/votos/tendencia`, { params });
  }
}



==================================================
Arquivo: app\services\eleitor.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';

interface ValidarCpfResponse {
  status: 'ABLE_TO_VOTE' | 'UNABLE_TO_VOTE';
}

@Injectable({
  providedIn: 'root'
})
export class EleitorService {
  private apiUrl = `${environment.apiUrl}/eleitores`;

  constructor(private http: HttpClient) {}

  validarCpf(cpf: string): Observable<ValidarCpfResponse> {
    return this.http.post<ValidarCpfResponse>(`${this.apiUrl}/validar`, { cpf });
  }
}



==================================================
Arquivo: app\services\pauta.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { PautaRequestDTO, PautaResponseDTO } from '../models/pauta.model';

@Injectable({
  providedIn: 'root'
})
export class PautaService {
  private apiUrl = `${environment.apiUrl}/pautas`;

  constructor(private http: HttpClient) {}

  create(pauta: PautaRequestDTO): Observable<PautaResponseDTO> {
    return this.http.post<PautaResponseDTO>(this.apiUrl, pauta);
  }

  getAll(): Observable<PautaResponseDTO[]> {
    return this.http.get<PautaResponseDTO[]>(this.apiUrl);
  }

  getById(id: number): Observable<PautaResponseDTO> {
    return this.http.get<PautaResponseDTO>(`${this.apiUrl}/${id}`);
  }

  update(id: number, pauta: PautaRequestDTO): Observable<PautaResponseDTO> {
    return this.http.put<PautaResponseDTO>(`${this.apiUrl}/${id}`, pauta);
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}



==================================================
Arquivo: app\services\sessao-votacao.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { SessaoVotacaoRequestDTO, SessaoVotacaoResponseDTO } from '../models/sessao-votacao.model';

@Injectable({
  providedIn: 'root'
})
export class SessaoVotacaoService {
  private apiUrl = `${environment.apiUrl}/sessoes`;

  constructor(private http: HttpClient) {}

  create(sessao: SessaoVotacaoRequestDTO): Observable<SessaoVotacaoResponseDTO> {
    return this.http.post<SessaoVotacaoResponseDTO>(this.apiUrl, sessao);
  }

  getAll(): Observable<SessaoVotacaoResponseDTO[]> {
    return this.http.get<SessaoVotacaoResponseDTO[]>(this.apiUrl);
  }

  getById(id: number): Observable<SessaoVotacaoResponseDTO> {
    return this.http.get<SessaoVotacaoResponseDTO>(`${this.apiUrl}/${id}`);
  }

  update(id: number, sessao: SessaoVotacaoRequestDTO): Observable<SessaoVotacaoResponseDTO> {
    return this.http.put<SessaoVotacaoResponseDTO>(`${this.apiUrl}/${id}`, sessao);
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}



==================================================
Arquivo: app\services\voto.service.ts
==================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { VotoRequestDTO, VotoResponseDTO, ResultadoResponseDTO, SessaoAbertaDTO } from '../models/voto.model';
import {SessaoAberta} from '../models/sessao-votacao.model';

@Injectable({
  providedIn: 'root'
})
export class VotoService {
  private apiUrl = `${environment.apiUrl}/votos`;

  constructor(private http: HttpClient) {}

  create(voto: VotoRequestDTO): Observable<VotoResponseDTO> {
    return this.http.post<VotoResponseDTO>(this.apiUrl, voto);
  }

  getAll(pautaId?: number): Observable<VotoResponseDTO[]> {
    const url = pautaId ? `${this.apiUrl}?pautaId=${pautaId}` : this.apiUrl;
    return this.http.get<VotoResponseDTO[]>(url);
  }

  getById(id: number): Observable<VotoResponseDTO> {
    return this.http.get<VotoResponseDTO>(`${this.apiUrl}/${id}`);
  }

  update(id: number, voto: VotoRequestDTO): Observable<VotoResponseDTO> {
    return this.http.put<VotoResponseDTO>(`${this.apiUrl}/${id}`, voto);
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }

  getResultado(pautaId: number): Observable<ResultadoResponseDTO> {
    return this.http.get<ResultadoResponseDTO>(`${this.apiUrl}/resultado/${pautaId}`);
  }

  getSessoesAbertasNaoVotadas(cpf: string): Observable<SessaoAbertaDTO[]> {
    return this.http.get<SessaoAbertaDTO[]>(`${this.apiUrl}/sessoes-abertas?cpf=${cpf}`);
  }

  validarCpf(cpf: string): Observable<boolean> {
    return this.http.post<boolean>(`${this.apiUrl}/validar-cpf`, cpf);
  }

  listarSessoesAbertasSemVoto(cpf: string): Observable<SessaoAberta[]> {
    return this.http.get<SessaoAberta[]>(`${this.apiUrl}/sessoes-abertas-sem-voto/${cpf}`);
  }

  votar(voto: { pautaId: number; cpf: string; voto: string }): Observable<any> {
    return this.http.post(`${this.apiUrl}`, voto);
  }
}



==================================================
Arquivo: app\shared\components\header\header.component.html
==================================================

<header class="header">
  <div class="header-content container-dark">
    <div class="logo-title">
      <h1>Sistema de Votação Online - DbServer</h1>
    </div>
  </div>
</header>



==================================================
Arquivo: app\shared\components\header\header.component.scss
==================================================

.header {
  background: var(--header-color);
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--border-color);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.logo-title {
  display: flex;
  align-items: center;
  gap: 10px;
}

.logo {
  height: 40px;
}

.header h1 {
  font-size: 24px;
  color: var(--text-light);
}

.nav {
  display: flex;
  gap: 20px;
}

.nav a {
  color: var(--link-color);
  text-decoration: none;
  font-size: 16px;
}

.nav a:hover {
  text-decoration: underline;
}



==================================================
Arquivo: app\shared\components\header\header.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\components\header\header.component.ts
==================================================

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, RouterLinkActive } from '@angular/router';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent {}



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.html
==================================================

<div class="sidebar">
  <ul class="nav flex-column">
    <li class="nav-item">
      <a class="nav-link" routerLink="/dashboard" routerLinkActive="active">
        <i class="bi bi-grid-fill me-2"></i> Dashboard
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" routerLink="/pautas" routerLinkActive="active">
        <i class="bi bi-file-text-fill me-2"></i> Pautas
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" routerLink="/sessoes" routerLinkActive="active">
        <i class="bi bi-calendar-event-fill me-2"></i> Sessões
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" routerLink="/votos/novo" routerLinkActive="active">
        <i class="bi bi-check-square-fill me-2"></i> Votos
      </a>
    </li>
  </ul>
</div>



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.scss
==================================================

.sidebar {
  width: 250px;
  background: var(--sidebar-color);
  padding: 20px;
  height: calc(100vh - 60px);
  border-right: 1px solid var(--border-color);
}

.sidebar ul {
  list-style: none;
}

.sidebar li {
  margin-bottom: 15px;
}

.sidebar a {
  color: var(--link-color);
  text-decoration: none;
  font-size: 16px;
}

.sidebar a:hover {
  text-decoration: underline;
}



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SidebarComponent } from './sidebar.component';

describe('SidebarComponent', () => {
  let component: SidebarComponent;
  let fixture: ComponentFixture<SidebarComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SidebarComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SidebarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\components\sidebar\sidebar.component.ts
==================================================

import { Component } from '@angular/core';
import {CommonModule} from '@angular/common';
import {RouterLink, RouterLinkActive} from '@angular/router';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  imports: [CommonModule, RouterLink, RouterLinkActive],
  templateUrl: './sidebar.component.html',
  styleUrl: './sidebar.component.scss'
})
export class SidebarComponent {

}



==================================================
Arquivo: app\shared\components\timer\timer.component.html
==================================================

<span [ngClass]="timerClass">{{ tempoRestante }}</span>



==================================================
Arquivo: app\shared\components\timer\timer.component.scss
==================================================

.green {
  color: #28a745;
  font-weight: bold;
}

.yellow {
  color: #ffc107;
  font-weight: bold;
}

.red {
  color: #dc3545;
  font-weight: bold;
}

.expired {
  color: var(--error-color);
  font-weight: bold;
}



==================================================
Arquivo: app\shared\components\timer\timer.component.spec.ts
==================================================

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TimerComponent } from './timer.component';

describe('TimerComponent', () => {
  let component: TimerComponent;
  let fixture: ComponentFixture<TimerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TimerComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TimerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



==================================================
Arquivo: app\shared\components\timer\timer.component.ts
==================================================

import { Component, Input, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { interval, Subscription } from 'rxjs';

@Component({
  selector: 'app-timer',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './timer.component.html',
  styleUrls: ['./timer.component.scss']
})
export class TimerComponent implements OnInit, OnDestroy {
  @Input() dataFechamento!: string;
  tempoRestante: string = '';
  timerClass: string = '';
  private subscription!: Subscription;

  ngOnInit(): void {
    this.updateTimer();
    this.subscription = interval(1000).subscribe(() => this.updateTimer());
  }

  ngOnDestroy(): void {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  private updateTimer(): void {
    const now = new Date();
    const fechamento = new Date(this.dataFechamento);
    const diffMs = fechamento.getTime() - now.getTime();

    if (diffMs <= 0) {
      this.tempoRestante = 'Sessão encerrada';
      this.timerClass = 'expired';
      return;
    }

    const minutes = Math.floor(diffMs / 1000 / 60);
    const seconds = Math.floor((diffMs / 1000) % 60);
    this.tempoRestante = `${minutes}m ${seconds}s`;

    if (minutes > 10) {
      this.timerClass = 'green';
    } else if (minutes >= 5) {
      this.timerClass = 'yellow';
    } else {
      this.timerClass = 'red';
    }
  }
}



==================================================
Arquivo: environments\environment.prod.ts
==================================================

export const environment = {
  production: true,
  apiUrl: 'https://api.seu-dominio.com/api/v1'
};



==================================================
Arquivo: environments\environment.ts
==================================================

export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080/api/v1'
};


==================================================
Resumo:
Total de arquivos processados: 65
Arquivos com erro: 0
Arquivos processados com sucesso: 65
==================================================
